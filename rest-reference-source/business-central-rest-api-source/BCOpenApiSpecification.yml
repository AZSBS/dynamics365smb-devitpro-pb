openapi: '3.0.0'
info:
 version: 1.0.0
 title: Simple API
 description: A simple API to illustrate OpenAPI concepts
servers:
 - url: https://wsh43.northeurope.cloudapp.azure.com:7048/NAV/api/beta 
paths:
 "/companies":
  get:
   summary: Returns a list of companies
   operationId: getcompanies
   tags: [companies]
   responses:
    200:
     description: Succesfully returned a list of companies
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/company'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'systemVersion', 'name', 'displayName', 'businessProfileId']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'systemVersion', 'name', 'displayName', 'businessProfileId']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the company from its unique id
   operationId: getcompanybyid
   tags: [companies]
   responses:
    200:
     description: Succesfully returned the requested company
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/company'
 "/companies({company_id})/items":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of items
   operationId: getitems
   tags: [items]
   responses:
    200:
     description: Succesfully returned a list of items
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/item'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'type', 'blocked', 'baseUnitOfMeasureId', 'baseUnitOfMeasure', 'gtin', 'inventory', 'unitPrice', 'priceIncludesTax', 'unitCost', 'taxGroupId', 'taxGroupCode', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new item
   operationId: postitem
   tags: [items]
   requestBody:
    $ref: '#/components/requestBodies/item'
   responses:
    201:
     description: item succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/item'
 "/companies({company_id})/items({item_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: item_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'type', 'blocked', 'baseUnitOfMeasureId', 'baseUnitOfMeasure', 'gtin', 'inventory', 'unitPrice', 'priceIncludesTax', 'unitCost', 'taxGroupId', 'taxGroupCode', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the item from its unique id
   operationId: getitembyid
   tags: [items]
   responses:
    200:
     description: Succesfully returned the requested item
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/item'
  delete:
   summary: Allows the user to delete the specified item
   operationId: deleteitembyid
   tags: [items]
   responses:
    204:
     description: Succesfully deleted the item with the specified id
  patch:
   summary: Lets the user patch the specified item
   operationId: patchitembyid
   tags: [items]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/item'
   responses:
    200:
     description: Succesfully updated the item with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/item'
 "/companies({company_id})/customers":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of customers
   operationId: getcustomers
   tags: [customers]
   responses:
    200:
     description: Succesfully returned a list of customers
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/customer'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['currency', 'paymentTerm', 'shipmentMethod', 'paymentMethod']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'type', 'address', 'phoneNumber', 'email', 'website', 'taxLiable', 'taxAreaId', 'taxAreaDisplayName', 'taxRegistrationNumber', 'currencyId', 'currencyCode', 'paymentTermsId', 'shipmentMethodId', 'paymentMethodId', 'blocked', 'balance', 'overdueAmount', 'totalSalesExcludingTax', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new customer
   operationId: postcustomer
   tags: [customers]
   requestBody:
    $ref: '#/components/requestBodies/customer'
   responses:
    201:
     description: customer succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customer'
 "/companies({company_id})/customers({customer_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customer_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['currency', 'paymentTerm', 'shipmentMethod', 'paymentMethod']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'type', 'address', 'phoneNumber', 'email', 'website', 'taxLiable', 'taxAreaId', 'taxAreaDisplayName', 'taxRegistrationNumber', 'currencyId', 'currencyCode', 'paymentTermsId', 'shipmentMethodId', 'paymentMethodId', 'blocked', 'balance', 'overdueAmount', 'totalSalesExcludingTax', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the customer from its unique id
   operationId: getcustomerbyid
   tags: [customers]
   responses:
    200:
     description: Succesfully returned the requested customer
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customer'
  delete:
   summary: Allows the user to delete the specified customer
   operationId: deletecustomerbyid
   tags: [customers]
   responses:
    204:
     description: Succesfully deleted the customer with the specified id
  patch:
   summary: Lets the user patch the specified customer
   operationId: patchcustomerbyid
   tags: [customers]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/customer'
   responses:
    200:
     description: Succesfully updated the customer with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customer'
 "/companies({company_id})/vendors":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of vendors
   operationId: getvendors
   tags: [vendors]
   responses:
    200:
     description: Succesfully returned a list of vendors
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/vendor'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['currency', 'paymentTerm', 'paymentMethod']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'address', 'phoneNumber', 'email', 'website', 'taxRegistrationNumber', 'currencyId', 'currencyCode', 'irs1099Code', 'paymentTermsId', 'paymentMethodId', 'taxLiable', 'blocked', 'balance', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new vendor
   operationId: postvendor
   tags: [vendors]
   requestBody:
    $ref: '#/components/requestBodies/vendor'
   responses:
    201:
     description: vendor succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/vendor'
 "/companies({company_id})/vendors({vendor_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: vendor_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['currency', 'paymentTerm', 'paymentMethod']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'address', 'phoneNumber', 'email', 'website', 'taxRegistrationNumber', 'currencyId', 'currencyCode', 'irs1099Code', 'paymentTermsId', 'paymentMethodId', 'taxLiable', 'blocked', 'balance', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the vendor from its unique id
   operationId: getvendorbyid
   tags: [vendors]
   responses:
    200:
     description: Succesfully returned the requested vendor
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/vendor'
  delete:
   summary: Allows the user to delete the specified vendor
   operationId: deletevendorbyid
   tags: [vendors]
   responses:
    204:
     description: Succesfully deleted the vendor with the specified id
  patch:
   summary: Lets the user patch the specified vendor
   operationId: patchvendorbyid
   tags: [vendors]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/vendor'
   responses:
    200:
     description: Succesfully updated the vendor with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/vendor'
 "/companies({company_id})/companyInformation":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of companyInformation
   operationId: getcompanyInformation
   tags: [companyInformation]
   responses:
    200:
     description: Succesfully returned a list of companyInformation
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/companyInformation'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'displayName', 'address', 'phoneNumber', 'faxNumber', 'email', 'website', 'taxRegistrationNumber', 'currencyCode', 'currentFiscalYearStartDate', 'industry', 'picture', 'businessProfileId', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/companyInformation({companyInformation_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: companyInformation_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'displayName', 'address', 'phoneNumber', 'faxNumber', 'email', 'website', 'taxRegistrationNumber', 'currencyCode', 'currentFiscalYearStartDate', 'industry', 'picture', 'businessProfileId', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the companyInformation from its unique id
   operationId: getcompanyInformationbyid
   tags: [companyInformation]
   responses:
    200:
     description: Succesfully returned the requested companyInformation
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/companyInformation'
  patch:
   summary: Lets the user patch the specified companyInformation
   operationId: patchcompanyInformationbyid
   tags: [companyInformation]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/companyInformation'
   responses:
    200:
     description: Succesfully updated the companyInformation with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/companyInformation'
 "/companies({company_id})/salesInvoices":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesInvoices
   operationId: getsalesInvoices
   tags: [salesInvoices]
   responses:
    200:
     description: Succesfully returned a list of salesInvoices
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesInvoice'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['salesInvoiceLines', 'pdfDocument', 'customer', 'currency', 'paymentTerm', 'shipmentMethod']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'externalDocumentNumber', 'invoiceDate', 'dueDate', 'customerPurchaseOrderReference', 'customerId', 'contactId', 'customerNumber', 'customerName', 'billingPostalAddress', 'currencyId', 'currencyCode', 'orderId', 'orderNumber', 'paymentTermsId', 'shipmentMethodId', 'salesperson', 'pricesIncludeTax', 'discountAmount', 'discountAppliedBeforeTax', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'status', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesInvoice
   operationId: postsalesInvoice
   tags: [salesInvoices]
   requestBody:
    $ref: '#/components/requestBodies/salesInvoice'
   responses:
    201:
     description: salesInvoice succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesInvoice'
 "/companies({company_id})/salesInvoices({salesInvoice_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoice_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['salesInvoiceLines', 'pdfDocument', 'customer', 'currency', 'paymentTerm', 'shipmentMethod']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'externalDocumentNumber', 'invoiceDate', 'dueDate', 'customerPurchaseOrderReference', 'customerId', 'contactId', 'customerNumber', 'customerName', 'billingPostalAddress', 'currencyId', 'currencyCode', 'orderId', 'orderNumber', 'paymentTermsId', 'shipmentMethodId', 'salesperson', 'pricesIncludeTax', 'discountAmount', 'discountAppliedBeforeTax', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'status', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesInvoice from its unique id
   operationId: getsalesInvoicebyid
   tags: [salesInvoices]
   responses:
    200:
     description: Succesfully returned the requested salesInvoice
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesInvoice'
  delete:
   summary: Allows the user to delete the specified salesInvoice
   operationId: deletesalesInvoicebyid
   tags: [salesInvoices]
   responses:
    204:
     description: Succesfully deleted the salesInvoice with the specified id
  patch:
   summary: Lets the user patch the specified salesInvoice
   operationId: patchsalesInvoicebyid
   tags: [salesInvoices]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesInvoice'
   responses:
    200:
     description: Succesfully updated the salesInvoice with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesInvoice'
 "/companies({company_id})/salesInvoices/Microsoft.NAV.post":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  post:
   summary: Performs the post action for salesInvoices entity
   operationId: postAction_salesInvoices
   tags: [salesInvoices]
   responses:
    204:
     description: Succesfully perfpormed a post action on the salesInvoices entity
 "/companies({company_id})/salesInvoices/Microsoft.NAV.postAndSend":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  post:
   summary: Performs the postAndSend action for salesInvoices entity
   operationId: postAndSendAction_salesInvoices
   tags: [salesInvoices]
   responses:
    204:
     description: Succesfully perfpormed a postAndSend action on the salesInvoices entity
 "/companies({company_id})/salesInvoices/Microsoft.NAV.send":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  post:
   summary: Performs the send action for salesInvoices entity
   operationId: sendAction_salesInvoices
   tags: [salesInvoices]
   responses:
    204:
     description: Succesfully perfpormed a send action on the salesInvoices entity
 "/companies({company_id})/salesInvoices/Microsoft.NAV.cancel":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  post:
   summary: Performs the cancel action for salesInvoices entity
   operationId: cancelAction_salesInvoices
   tags: [salesInvoices]
   responses:
    204:
     description: Succesfully perfpormed a cancel action on the salesInvoices entity
 "/companies({company_id})/salesInvoices/Microsoft.NAV.cancelAndSend":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  post:
   summary: Performs the cancelAndSend action for salesInvoices entity
   operationId: cancelAndSendAction_salesInvoices
   tags: [salesInvoices]
   responses:
    204:
     description: Succesfully perfpormed a cancelAndSend action on the salesInvoices entity
 "/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoice_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoiceLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesInvoiceLines
   operationId: getsalesInvoiceLinesforsalesInvoice
   tags: [salesInvoiceLines]
   responses:
    200:
     description: Succesfully returned a list of salesInvoiceLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesInvoiceLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesInvoiceLine
   operationId: postsalesInvoiceLineforsalesInvoice
   tags: [salesInvoiceLines]
   requestBody:
    $ref: '#/components/requestBodies/salesInvoiceLine'
   responses:
    201:
     description: salesInvoiceLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesInvoiceLine'
 "/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines({salesInvoiceLine_documentId},{salesInvoiceLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoice_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoiceLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoiceLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesInvoiceLine from its unique documentId, sequence
   operationId: getsalesInvoiceLineforsalesInvoicebysequencebydocumentId
   tags: [salesInvoiceLines]
   responses:
    200:
     description: Succesfully returned the requested salesInvoiceLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesInvoiceLine'
  delete:
   summary: Allows the user to delete the specified salesInvoiceLine
   operationId: deletesalesInvoiceLineforsalesInvoicebysequencebydocumentId
   tags: [salesInvoiceLines]
   responses:
    204:
     description: Succesfully deleted the salesInvoiceLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified salesInvoiceLine
   operationId: patchsalesInvoiceLineforsalesInvoicebysequencebydocumentId
   tags: [salesInvoiceLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesInvoiceLine'
   responses:
    200:
     description: Succesfully updated the salesInvoiceLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesInvoiceLine'
 "/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoice_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of pdfDocument
   operationId: getpdfDocumentforsalesInvoice
   tags: [pdfDocument]
   responses:
    200:
     description: Succesfully returned a list of pdfDocument
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/pdfDocument'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'content']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new pdfDocument
   operationId: postpdfDocumentforsalesInvoice
   tags: [pdfDocument]
   requestBody:
    $ref: '#/components/requestBodies/pdfDocument'
   responses:
    201:
     description: pdfDocument succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/pdfDocument'
 "/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument({pdfDocument_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoice_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: pdfDocument_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'content']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the pdfDocument from its unique id
   operationId: getpdfDocumentforsalesInvoicebyid
   tags: [pdfDocument]
   responses:
    200:
     description: Succesfully returned the requested pdfDocument
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/pdfDocument'
  delete:
   summary: Allows the user to delete the specified pdfDocument
   operationId: deletepdfDocumentforsalesInvoicebyid
   tags: [pdfDocument]
   responses:
    204:
     description: Succesfully deleted the pdfDocument with the specified id
  patch:
   summary: Lets the user patch the specified pdfDocument
   operationId: patchpdfDocumentforsalesInvoicebyid
   tags: [pdfDocument]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/pdfDocument'
   responses:
    200:
     description: Succesfully updated the pdfDocument with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/pdfDocument'
 "/companies({company_id})/salesInvoiceLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoiceLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesInvoiceLines
   operationId: getsalesInvoiceLines
   tags: [salesInvoiceLines]
   responses:
    200:
     description: Succesfully returned a list of salesInvoiceLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesInvoiceLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesInvoiceLine
   operationId: postsalesInvoiceLine
   tags: [salesInvoiceLines]
   requestBody:
    $ref: '#/components/requestBodies/salesInvoiceLine'
   responses:
    201:
     description: salesInvoiceLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesInvoiceLine'
 "/companies({company_id})/salesInvoiceLines({salesInvoiceLine_documentId},{salesInvoiceLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoiceLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesInvoiceLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesInvoiceLine from its unique documentId, sequence
   operationId: getsalesInvoiceLinebysequencebydocumentId
   tags: [salesInvoiceLines]
   responses:
    200:
     description: Succesfully returned the requested salesInvoiceLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesInvoiceLine'
  delete:
   summary: Allows the user to delete the specified salesInvoiceLine
   operationId: deletesalesInvoiceLinebysequencebydocumentId
   tags: [salesInvoiceLines]
   responses:
    204:
     description: Succesfully deleted the salesInvoiceLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified salesInvoiceLine
   operationId: patchsalesInvoiceLinebysequencebydocumentId
   tags: [salesInvoiceLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesInvoiceLine'
   responses:
    200:
     description: Succesfully updated the salesInvoiceLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesInvoiceLine'
 "/companies({company_id})/pdfDocument":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of pdfDocument
   operationId: getpdfDocument
   tags: [pdfDocument]
   responses:
    200:
     description: Succesfully returned a list of pdfDocument
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/pdfDocument'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'content']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new pdfDocument
   operationId: postpdfDocument
   tags: [pdfDocument]
   requestBody:
    $ref: '#/components/requestBodies/pdfDocument'
   responses:
    201:
     description: pdfDocument succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/pdfDocument'
 "/companies({company_id})/pdfDocument({pdfDocument_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: pdfDocument_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'content']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the pdfDocument from its unique id
   operationId: getpdfDocumentbyid
   tags: [pdfDocument]
   responses:
    200:
     description: Succesfully returned the requested pdfDocument
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/pdfDocument'
  delete:
   summary: Allows the user to delete the specified pdfDocument
   operationId: deletepdfDocumentbyid
   tags: [pdfDocument]
   responses:
    204:
     description: Succesfully deleted the pdfDocument with the specified id
  patch:
   summary: Lets the user patch the specified pdfDocument
   operationId: patchpdfDocumentbyid
   tags: [pdfDocument]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/pdfDocument'
   responses:
    200:
     description: Succesfully updated the pdfDocument with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/pdfDocument'
 "/companies({company_id})/customerPaymentJournals":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of customerPaymentJournals
   operationId: getcustomerPaymentJournals
   tags: [customerPaymentJournals]
   responses:
    200:
     description: Succesfully returned a list of customerPaymentJournals
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/customerPaymentJournal'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['customerPayments']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new customerPaymentJournal
   operationId: postcustomerPaymentJournal
   tags: [customerPaymentJournals]
   requestBody:
    $ref: '#/components/requestBodies/customerPaymentJournal'
   responses:
    201:
     description: customerPaymentJournal succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerPaymentJournal'
 "/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerPaymentJournal_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['customerPayments']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the customerPaymentJournal from its unique id
   operationId: getcustomerPaymentJournalbyid
   tags: [customerPaymentJournals]
   responses:
    200:
     description: Succesfully returned the requested customerPaymentJournal
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerPaymentJournal'
  delete:
   summary: Allows the user to delete the specified customerPaymentJournal
   operationId: deletecustomerPaymentJournalbyid
   tags: [customerPaymentJournals]
   responses:
    204:
     description: Succesfully deleted the customerPaymentJournal with the specified id
  patch:
   summary: Lets the user patch the specified customerPaymentJournal
   operationId: patchcustomerPaymentJournalbyid
   tags: [customerPaymentJournals]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/customerPaymentJournal'
   responses:
    200:
     description: Succesfully updated the customerPaymentJournal with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerPaymentJournal'
 "/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerPaymentJournal_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of customerPayments
   operationId: getcustomerPaymentsforcustomerPaymentJournal
   tags: [customerPayments]
   responses:
    200:
     description: Succesfully returned a list of customerPayments
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/customerPayment'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['customer']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'journalDisplayName', 'lineNumber', 'customerId', 'customerNumber', 'contactId', 'postingDate', 'documentNumber', 'externalDocumentNumber', 'amount', 'appliesToInvoiceId', 'appliesToInvoiceNumber', 'description', 'comment', 'dimensions', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new customerPayment
   operationId: postcustomerPaymentforcustomerPaymentJournal
   tags: [customerPayments]
   requestBody:
    $ref: '#/components/requestBodies/customerPayment'
   responses:
    201:
     description: customerPayment succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerPayment'
 "/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerPaymentJournal_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerPayment_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['customer']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'journalDisplayName', 'lineNumber', 'customerId', 'customerNumber', 'contactId', 'postingDate', 'documentNumber', 'externalDocumentNumber', 'amount', 'appliesToInvoiceId', 'appliesToInvoiceNumber', 'description', 'comment', 'dimensions', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the customerPayment from its unique id
   operationId: getcustomerPaymentforcustomerPaymentJournalbyid
   tags: [customerPayments]
   responses:
    200:
     description: Succesfully returned the requested customerPayment
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerPayment'
  delete:
   summary: Allows the user to delete the specified customerPayment
   operationId: deletecustomerPaymentforcustomerPaymentJournalbyid
   tags: [customerPayments]
   responses:
    204:
     description: Succesfully deleted the customerPayment with the specified id
  patch:
   summary: Lets the user patch the specified customerPayment
   operationId: patchcustomerPaymentforcustomerPaymentJournalbyid
   tags: [customerPayments]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/customerPayment'
   responses:
    200:
     description: Succesfully updated the customerPayment with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerPayment'
 "/companies({company_id})/customerPayments":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of customerPayments
   operationId: getcustomerPayments
   tags: [customerPayments]
   responses:
    200:
     description: Succesfully returned a list of customerPayments
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/customerPayment'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['customer']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'journalDisplayName', 'lineNumber', 'customerId', 'customerNumber', 'contactId', 'postingDate', 'documentNumber', 'externalDocumentNumber', 'amount', 'appliesToInvoiceId', 'appliesToInvoiceNumber', 'description', 'comment', 'dimensions', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new customerPayment
   operationId: postcustomerPayment
   tags: [customerPayments]
   requestBody:
    $ref: '#/components/requestBodies/customerPayment'
   responses:
    201:
     description: customerPayment succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerPayment'
 "/companies({company_id})/customerPayments({customerPayment_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerPayment_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['customer']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'journalDisplayName', 'lineNumber', 'customerId', 'customerNumber', 'contactId', 'postingDate', 'documentNumber', 'externalDocumentNumber', 'amount', 'appliesToInvoiceId', 'appliesToInvoiceNumber', 'description', 'comment', 'dimensions', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the customerPayment from its unique id
   operationId: getcustomerPaymentbyid
   tags: [customerPayments]
   responses:
    200:
     description: Succesfully returned the requested customerPayment
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerPayment'
  delete:
   summary: Allows the user to delete the specified customerPayment
   operationId: deletecustomerPaymentbyid
   tags: [customerPayments]
   responses:
    204:
     description: Succesfully deleted the customerPayment with the specified id
  patch:
   summary: Lets the user patch the specified customerPayment
   operationId: patchcustomerPaymentbyid
   tags: [customerPayments]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/customerPayment'
   responses:
    200:
     description: Succesfully updated the customerPayment with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerPayment'
 "/companies({company_id})/accounts":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of accounts
   operationId: getaccounts
   tags: [accounts]
   responses:
    200:
     description: Succesfully returned a list of accounts
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/account'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'category', 'subCategory', 'blocked', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/accounts({account_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: account_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'category', 'subCategory', 'blocked', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the account from its unique id
   operationId: getaccountbyid
   tags: [accounts]
   responses:
    200:
     description: Succesfully returned the requested account
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/account'
 "/companies({company_id})/taxGroups":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of taxGroups
   operationId: gettaxGroups
   tags: [taxGroups]
   responses:
    200:
     description: Succesfully returned a list of taxGroups
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/taxGroup'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'taxType', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new taxGroup
   operationId: posttaxGroup
   tags: [taxGroups]
   requestBody:
    $ref: '#/components/requestBodies/taxGroup'
   responses:
    201:
     description: taxGroup succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/taxGroup'
 "/companies({company_id})/taxGroups({taxGroup_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: taxGroup_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'taxType', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the taxGroup from its unique id
   operationId: gettaxGroupbyid
   tags: [taxGroups]
   responses:
    200:
     description: Succesfully returned the requested taxGroup
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/taxGroup'
  delete:
   summary: Allows the user to delete the specified taxGroup
   operationId: deletetaxGroupbyid
   tags: [taxGroups]
   responses:
    204:
     description: Succesfully deleted the taxGroup with the specified id
  patch:
   summary: Lets the user patch the specified taxGroup
   operationId: patchtaxGroupbyid
   tags: [taxGroups]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/taxGroup'
   responses:
    200:
     description: Succesfully updated the taxGroup with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/taxGroup'
 "/companies({company_id})/journals":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of journals
   operationId: getjournals
   tags: [journals]
   responses:
    200:
     description: Succesfully returned a list of journals
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/journal'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['journalLines']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new journal
   operationId: postjournal
   tags: [journals]
   requestBody:
    $ref: '#/components/requestBodies/journal'
   responses:
    201:
     description: journal succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/journal'
 "/companies({company_id})/journals({journal_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: journal_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['journalLines']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the journal from its unique id
   operationId: getjournalbyid
   tags: [journals]
   responses:
    200:
     description: Succesfully returned the requested journal
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/journal'
  delete:
   summary: Allows the user to delete the specified journal
   operationId: deletejournalbyid
   tags: [journals]
   responses:
    204:
     description: Succesfully deleted the journal with the specified id
  patch:
   summary: Lets the user patch the specified journal
   operationId: patchjournalbyid
   tags: [journals]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/journal'
   responses:
    200:
     description: Succesfully updated the journal with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/journal'
 "/companies({company_id})/journals/Microsoft.NAV.post":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  post:
   summary: Performs the post action for journals entity
   operationId: postAction_journals
   tags: [journals]
   responses:
    204:
     description: Succesfully perfpormed a post action on the journals entity
 "/companies({company_id})/journals({journal_id})/journalLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: journal_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of journalLines
   operationId: getjournalLinesforjournal
   tags: [journalLines]
   responses:
    200:
     description: Succesfully returned a list of journalLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/journalLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['account']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'journalDisplayName', 'lineNumber', 'accountId', 'accountNumber', 'postingDate', 'documentNumber', 'externalDocumentNumber', 'amount', 'description', 'comment', 'dimensions', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new journalLine
   operationId: postjournalLineforjournal
   tags: [journalLines]
   requestBody:
    $ref: '#/components/requestBodies/journalLine'
   responses:
    201:
     description: journalLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/journalLine'
 "/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: journal_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: journalLine_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['account']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'journalDisplayName', 'lineNumber', 'accountId', 'accountNumber', 'postingDate', 'documentNumber', 'externalDocumentNumber', 'amount', 'description', 'comment', 'dimensions', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the journalLine from its unique id
   operationId: getjournalLineforjournalbyid
   tags: [journalLines]
   responses:
    200:
     description: Succesfully returned the requested journalLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/journalLine'
  delete:
   summary: Allows the user to delete the specified journalLine
   operationId: deletejournalLineforjournalbyid
   tags: [journalLines]
   responses:
    204:
     description: Succesfully deleted the journalLine with the specified id
  patch:
   summary: Lets the user patch the specified journalLine
   operationId: patchjournalLineforjournalbyid
   tags: [journalLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/journalLine'
   responses:
    200:
     description: Succesfully updated the journalLine with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/journalLine'
 "/companies({company_id})/journalLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of journalLines
   operationId: getjournalLines
   tags: [journalLines]
   responses:
    200:
     description: Succesfully returned a list of journalLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/journalLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['account']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'journalDisplayName', 'lineNumber', 'accountId', 'accountNumber', 'postingDate', 'documentNumber', 'externalDocumentNumber', 'amount', 'description', 'comment', 'dimensions', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new journalLine
   operationId: postjournalLine
   tags: [journalLines]
   requestBody:
    $ref: '#/components/requestBodies/journalLine'
   responses:
    201:
     description: journalLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/journalLine'
 "/companies({company_id})/journalLines({journalLine_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: journalLine_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['account']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'journalDisplayName', 'lineNumber', 'accountId', 'accountNumber', 'postingDate', 'documentNumber', 'externalDocumentNumber', 'amount', 'description', 'comment', 'dimensions', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the journalLine from its unique id
   operationId: getjournalLinebyid
   tags: [journalLines]
   responses:
    200:
     description: Succesfully returned the requested journalLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/journalLine'
  delete:
   summary: Allows the user to delete the specified journalLine
   operationId: deletejournalLinebyid
   tags: [journalLines]
   responses:
    204:
     description: Succesfully deleted the journalLine with the specified id
  patch:
   summary: Lets the user patch the specified journalLine
   operationId: patchjournalLinebyid
   tags: [journalLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/journalLine'
   responses:
    200:
     description: Succesfully updated the journalLine with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/journalLine'
 "/companies({company_id})/employees":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of employees
   operationId: getemployees
   tags: [employees]
   responses:
    200:
     description: Succesfully returned a list of employees
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/employee'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'givenName', 'middleName', 'surname', 'jobTitle', 'address', 'phoneNumber', 'mobilePhone', 'email', 'personalEmail', 'employmentDate', 'terminationDate', 'status', 'birthDate', 'picture', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new employee
   operationId: postemployee
   tags: [employees]
   requestBody:
    $ref: '#/components/requestBodies/employee'
   responses:
    201:
     description: employee succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/employee'
 "/companies({company_id})/employees({employee_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: employee_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'displayName', 'givenName', 'middleName', 'surname', 'jobTitle', 'address', 'phoneNumber', 'mobilePhone', 'email', 'personalEmail', 'employmentDate', 'terminationDate', 'status', 'birthDate', 'picture', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the employee from its unique id
   operationId: getemployeebyid
   tags: [employees]
   responses:
    200:
     description: Succesfully returned the requested employee
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/employee'
  delete:
   summary: Allows the user to delete the specified employee
   operationId: deleteemployeebyid
   tags: [employees]
   responses:
    204:
     description: Succesfully deleted the employee with the specified id
  patch:
   summary: Lets the user patch the specified employee
   operationId: patchemployeebyid
   tags: [employees]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/employee'
   responses:
    200:
     description: Succesfully updated the employee with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/employee'
 "/companies({company_id})/generalLedgerEntries":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of generalLedgerEntries
   operationId: getgeneralLedgerEntries
   tags: [generalLedgerEntries]
   responses:
    200:
     description: Succesfully returned a list of generalLedgerEntries
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/generalLedgerEntry'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['account']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'postingDate', 'documentNumber', 'documentType', 'accountId', 'accountNumber', 'description', 'debitAmount', 'creditAmount', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/generalLedgerEntries({generalLedgerEntry_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: generalLedgerEntry_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['account']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'postingDate', 'documentNumber', 'documentType', 'accountId', 'accountNumber', 'description', 'debitAmount', 'creditAmount', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the generalLedgerEntry from its unique id
   operationId: getgeneralLedgerEntrybyid
   tags: [generalLedgerEntries]
   responses:
    200:
     description: Succesfully returned the requested generalLedgerEntry
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/generalLedgerEntry'
 "/companies({company_id})/currencies":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of currencies
   operationId: getcurrencies
   tags: [currencies]
   responses:
    200:
     description: Succesfully returned a list of currencies
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/currency'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'symbol', 'amountDecimalPlaces', 'amountRoundingPrecision', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new currency
   operationId: postcurrency
   tags: [currencies]
   requestBody:
    $ref: '#/components/requestBodies/currency'
   responses:
    201:
     description: currency succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/currency'
 "/companies({company_id})/currencies({currency_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: currency_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'symbol', 'amountDecimalPlaces', 'amountRoundingPrecision', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the currency from its unique id
   operationId: getcurrencybyid
   tags: [currencies]
   responses:
    200:
     description: Succesfully returned the requested currency
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/currency'
  delete:
   summary: Allows the user to delete the specified currency
   operationId: deletecurrencybyid
   tags: [currencies]
   responses:
    204:
     description: Succesfully deleted the currency with the specified id
  patch:
   summary: Lets the user patch the specified currency
   operationId: patchcurrencybyid
   tags: [currencies]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/currency'
   responses:
    200:
     description: Succesfully updated the currency with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/currency'
 "/companies({company_id})/paymentMethods":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of paymentMethods
   operationId: getpaymentMethods
   tags: [paymentMethods]
   responses:
    200:
     description: Succesfully returned a list of paymentMethods
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/paymentMethod'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new paymentMethod
   operationId: postpaymentMethod
   tags: [paymentMethods]
   requestBody:
    $ref: '#/components/requestBodies/paymentMethod'
   responses:
    201:
     description: paymentMethod succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/paymentMethod'
 "/companies({company_id})/paymentMethods({paymentMethod_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: paymentMethod_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the paymentMethod from its unique id
   operationId: getpaymentMethodbyid
   tags: [paymentMethods]
   responses:
    200:
     description: Succesfully returned the requested paymentMethod
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/paymentMethod'
  delete:
   summary: Allows the user to delete the specified paymentMethod
   operationId: deletepaymentMethodbyid
   tags: [paymentMethods]
   responses:
    204:
     description: Succesfully deleted the paymentMethod with the specified id
  patch:
   summary: Lets the user patch the specified paymentMethod
   operationId: patchpaymentMethodbyid
   tags: [paymentMethods]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/paymentMethod'
   responses:
    200:
     description: Succesfully updated the paymentMethod with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/paymentMethod'
 "/companies({company_id})/dimensions":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of dimensions
   operationId: getdimensions
   tags: [dimensions]
   responses:
    200:
     description: Succesfully returned a list of dimensions
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/dimension'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['dimensionValues']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/dimensions({dimension_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: dimension_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['dimensionValues']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the dimension from its unique id
   operationId: getdimensionbyid
   tags: [dimensions]
   responses:
    200:
     description: Succesfully returned the requested dimension
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/dimension'
 "/companies({company_id})/dimensions({dimension_id})/dimensionValues":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: dimension_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of dimensionValues
   operationId: getdimensionValuesfordimension
   tags: [dimensionValues]
   responses:
    200:
     description: Succesfully returned a list of dimensionValues
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/dimensionValue'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/dimensions({dimension_id})/dimensionValues({dimensionValue_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: dimension_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: dimensionValue_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the dimensionValue from its unique id
   operationId: getdimensionValuefordimensionbyid
   tags: [dimensionValues]
   responses:
    200:
     description: Succesfully returned the requested dimensionValue
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/dimensionValue'
 "/companies({company_id})/dimensionValues":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of dimensionValues
   operationId: getdimensionValues
   tags: [dimensionValues]
   responses:
    200:
     description: Succesfully returned a list of dimensionValues
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/dimensionValue'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/dimensionValues({dimensionValue_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: dimensionValue_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the dimensionValue from its unique id
   operationId: getdimensionValuebyid
   tags: [dimensionValues]
   responses:
    200:
     description: Succesfully returned the requested dimensionValue
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/dimensionValue'
 "/companies({company_id})/dimensionLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: dimensionLine_parentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of dimensionLines
   operationId: getdimensionLines
   tags: [dimensionLines]
   responses:
    200:
     description: Succesfully returned a list of dimensionLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/dimensionLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['dimension']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'parentId', 'id', 'code', 'displayName', 'valueId', 'valueCode', 'valueDisplayName']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new dimensionLine
   operationId: postdimensionLine
   tags: [dimensionLines]
   requestBody:
    $ref: '#/components/requestBodies/dimensionLine'
   responses:
    201:
     description: dimensionLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/dimensionLine'
 "/companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: dimensionLine_parentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: dimensionLine_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['dimension']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'parentId', 'id', 'code', 'displayName', 'valueId', 'valueCode', 'valueDisplayName']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the dimensionLine from its unique parentId, id
   operationId: getdimensionLinebyidbyparentId
   tags: [dimensionLines]
   responses:
    200:
     description: Succesfully returned the requested dimensionLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/dimensionLine'
  delete:
   summary: Allows the user to delete the specified dimensionLine
   operationId: deletedimensionLinebyidbyparentId
   tags: [dimensionLines]
   responses:
    204:
     description: Succesfully deleted the dimensionLine with the specified parentId, id
  patch:
   summary: Lets the user patch the specified dimensionLine
   operationId: patchdimensionLinebyidbyparentId
   tags: [dimensionLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/dimensionLine'
   responses:
    200:
     description: Succesfully updated the dimensionLine with the specified parentId, id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/dimensionLine'
 "/companies({company_id})/paymentTerms":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of paymentTerms
   operationId: getpaymentTerms
   tags: [paymentTerms]
   responses:
    200:
     description: Succesfully returned a list of paymentTerms
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/paymentTerm'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'dueDateCalculation', 'discountDateCalculation', 'discountPercent', 'calculateDiscountOnCreditMemos', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new paymentTerm
   operationId: postpaymentTerm
   tags: [paymentTerms]
   requestBody:
    $ref: '#/components/requestBodies/paymentTerm'
   responses:
    201:
     description: paymentTerm succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/paymentTerm'
 "/companies({company_id})/paymentTerms({paymentTerm_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: paymentTerm_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'dueDateCalculation', 'discountDateCalculation', 'discountPercent', 'calculateDiscountOnCreditMemos', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the paymentTerm from its unique id
   operationId: getpaymentTermbyid
   tags: [paymentTerms]
   responses:
    200:
     description: Succesfully returned the requested paymentTerm
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/paymentTerm'
  delete:
   summary: Allows the user to delete the specified paymentTerm
   operationId: deletepaymentTermbyid
   tags: [paymentTerms]
   responses:
    204:
     description: Succesfully deleted the paymentTerm with the specified id
  patch:
   summary: Lets the user patch the specified paymentTerm
   operationId: patchpaymentTermbyid
   tags: [paymentTerms]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/paymentTerm'
   responses:
    200:
     description: Succesfully updated the paymentTerm with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/paymentTerm'
 "/companies({company_id})/shipmentMethods":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of shipmentMethods
   operationId: getshipmentMethods
   tags: [shipmentMethods]
   responses:
    200:
     description: Succesfully returned a list of shipmentMethods
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/shipmentMethod'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new shipmentMethod
   operationId: postshipmentMethod
   tags: [shipmentMethods]
   requestBody:
    $ref: '#/components/requestBodies/shipmentMethod'
   responses:
    201:
     description: shipmentMethod succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/shipmentMethod'
 "/companies({company_id})/shipmentMethods({shipmentMethod_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: shipmentMethod_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the shipmentMethod from its unique id
   operationId: getshipmentMethodbyid
   tags: [shipmentMethods]
   responses:
    200:
     description: Succesfully returned the requested shipmentMethod
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/shipmentMethod'
  delete:
   summary: Allows the user to delete the specified shipmentMethod
   operationId: deleteshipmentMethodbyid
   tags: [shipmentMethods]
   responses:
    204:
     description: Succesfully deleted the shipmentMethod with the specified id
  patch:
   summary: Lets the user patch the specified shipmentMethod
   operationId: patchshipmentMethodbyid
   tags: [shipmentMethods]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/shipmentMethod'
   responses:
    200:
     description: Succesfully updated the shipmentMethod with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/shipmentMethod'
 "/companies({company_id})/itemCategories":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of itemCategories
   operationId: getitemCategories
   tags: [itemCategories]
   responses:
    200:
     description: Succesfully returned a list of itemCategories
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/itemCategory'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new itemCategory
   operationId: postitemCategory
   tags: [itemCategories]
   requestBody:
    $ref: '#/components/requestBodies/itemCategory'
   responses:
    201:
     description: itemCategory succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/itemCategory'
 "/companies({company_id})/itemCategories({itemCategory_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: itemCategory_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the itemCategory from its unique id
   operationId: getitemCategorybyid
   tags: [itemCategories]
   responses:
    200:
     description: Succesfully returned the requested itemCategory
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/itemCategory'
  delete:
   summary: Allows the user to delete the specified itemCategory
   operationId: deleteitemCategorybyid
   tags: [itemCategories]
   responses:
    204:
     description: Succesfully deleted the itemCategory with the specified id
  patch:
   summary: Lets the user patch the specified itemCategory
   operationId: patchitemCategorybyid
   tags: [itemCategories]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/itemCategory'
   responses:
    200:
     description: Succesfully updated the itemCategory with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/itemCategory'
 "/companies({company_id})/cashFlowStatement":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of cashFlowStatement
   operationId: getcashFlowStatement
   tags: [cashFlowStatement]
   responses:
    200:
     description: Succesfully returned a list of cashFlowStatement
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/cashFlowStatement'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'lineNumber', 'display', 'netChange', 'lineType', 'indentation', 'dateFilter']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/cashFlowStatement({cashFlowStatement_lineNumber})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: cashFlowStatement_lineNumber
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'lineNumber', 'display', 'netChange', 'lineType', 'indentation', 'dateFilter']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the cashFlowStatement from its unique lineNumber
   operationId: getcashFlowStatementbylineNumber
   tags: [cashFlowStatement]
   responses:
    200:
     description: Succesfully returned the requested cashFlowStatement
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/cashFlowStatement'
 "/companies({company_id})/countriesRegions":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of countriesRegions
   operationId: getcountriesRegions
   tags: [countriesRegions]
   responses:
    200:
     description: Succesfully returned a list of countriesRegions
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/countryRegion'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'addressFormat', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new countryRegion
   operationId: postcountryRegion
   tags: [countriesRegions]
   requestBody:
    $ref: '#/components/requestBodies/countryRegion'
   responses:
    201:
     description: countryRegion succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/countryRegion'
 "/companies({company_id})/countriesRegions({countryRegion_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: countryRegion_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'addressFormat', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the countryRegion from its unique id
   operationId: getcountryRegionbyid
   tags: [countriesRegions]
   responses:
    200:
     description: Succesfully returned the requested countryRegion
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/countryRegion'
  delete:
   summary: Allows the user to delete the specified countryRegion
   operationId: deletecountryRegionbyid
   tags: [countriesRegions]
   responses:
    204:
     description: Succesfully deleted the countryRegion with the specified id
  patch:
   summary: Lets the user patch the specified countryRegion
   operationId: patchcountryRegionbyid
   tags: [countriesRegions]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/countryRegion'
   responses:
    200:
     description: Succesfully updated the countryRegion with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/countryRegion'
 "/companies({company_id})/salesOrders":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesOrders
   operationId: getsalesOrders
   tags: [salesOrders]
   responses:
    200:
     description: Succesfully returned a list of salesOrders
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesOrder'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['salesOrderLines', 'customer', 'currency', 'paymentTerm']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'externalDocumentNumber', 'orderDate', 'customerId', 'contactId', 'customerNumber', 'customerName', 'billingPostalAddress', 'currencyId', 'currencyCode', 'pricesIncludeTax', 'paymentTermsId', 'salesperson', 'partialShipping', 'requestedDeliveryDate', 'discountAmount', 'discountAppliedBeforeTax', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'fullyShipped', 'status', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesOrder
   operationId: postsalesOrder
   tags: [salesOrders]
   requestBody:
    $ref: '#/components/requestBodies/salesOrder'
   responses:
    201:
     description: salesOrder succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesOrder'
 "/companies({company_id})/salesOrders({salesOrder_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesOrder_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['salesOrderLines', 'customer', 'currency', 'paymentTerm']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'externalDocumentNumber', 'orderDate', 'customerId', 'contactId', 'customerNumber', 'customerName', 'billingPostalAddress', 'currencyId', 'currencyCode', 'pricesIncludeTax', 'paymentTermsId', 'salesperson', 'partialShipping', 'requestedDeliveryDate', 'discountAmount', 'discountAppliedBeforeTax', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'fullyShipped', 'status', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesOrder from its unique id
   operationId: getsalesOrderbyid
   tags: [salesOrders]
   responses:
    200:
     description: Succesfully returned the requested salesOrder
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesOrder'
  delete:
   summary: Allows the user to delete the specified salesOrder
   operationId: deletesalesOrderbyid
   tags: [salesOrders]
   responses:
    204:
     description: Succesfully deleted the salesOrder with the specified id
  patch:
   summary: Lets the user patch the specified salesOrder
   operationId: patchsalesOrderbyid
   tags: [salesOrders]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesOrder'
   responses:
    200:
     description: Succesfully updated the salesOrder with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesOrder'
 "/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesOrder_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesOrderLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesOrderLines
   operationId: getsalesOrderLinesforsalesOrder
   tags: [salesOrderLines]
   responses:
    200:
     description: Succesfully returned a list of salesOrderLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesOrderLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'quantity', 'unitPrice', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate', 'shippedQuantity', 'invoicedQuantity', 'invoiceQuantity', 'shipQuantity']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesOrderLine
   operationId: postsalesOrderLineforsalesOrder
   tags: [salesOrderLines]
   requestBody:
    $ref: '#/components/requestBodies/salesOrderLine'
   responses:
    201:
     description: salesOrderLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesOrderLine'
 "/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines({salesOrderLine_documentId},{salesOrderLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesOrder_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesOrderLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesOrderLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'quantity', 'unitPrice', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate', 'shippedQuantity', 'invoicedQuantity', 'invoiceQuantity', 'shipQuantity']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesOrderLine from its unique documentId, sequence
   operationId: getsalesOrderLineforsalesOrderbysequencebydocumentId
   tags: [salesOrderLines]
   responses:
    200:
     description: Succesfully returned the requested salesOrderLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesOrderLine'
  delete:
   summary: Allows the user to delete the specified salesOrderLine
   operationId: deletesalesOrderLineforsalesOrderbysequencebydocumentId
   tags: [salesOrderLines]
   responses:
    204:
     description: Succesfully deleted the salesOrderLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified salesOrderLine
   operationId: patchsalesOrderLineforsalesOrderbysequencebydocumentId
   tags: [salesOrderLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesOrderLine'
   responses:
    200:
     description: Succesfully updated the salesOrderLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesOrderLine'
 "/companies({company_id})/salesOrderLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesOrderLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesOrderLines
   operationId: getsalesOrderLines
   tags: [salesOrderLines]
   responses:
    200:
     description: Succesfully returned a list of salesOrderLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesOrderLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'quantity', 'unitPrice', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate', 'shippedQuantity', 'invoicedQuantity', 'invoiceQuantity', 'shipQuantity']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesOrderLine
   operationId: postsalesOrderLine
   tags: [salesOrderLines]
   requestBody:
    $ref: '#/components/requestBodies/salesOrderLine'
   responses:
    201:
     description: salesOrderLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesOrderLine'
 "/companies({company_id})/salesOrderLines({salesOrderLine_documentId},{salesOrderLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesOrderLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesOrderLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'quantity', 'unitPrice', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate', 'shippedQuantity', 'invoicedQuantity', 'invoiceQuantity', 'shipQuantity']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesOrderLine from its unique documentId, sequence
   operationId: getsalesOrderLinebysequencebydocumentId
   tags: [salesOrderLines]
   responses:
    200:
     description: Succesfully returned the requested salesOrderLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesOrderLine'
  delete:
   summary: Allows the user to delete the specified salesOrderLine
   operationId: deletesalesOrderLinebysequencebydocumentId
   tags: [salesOrderLines]
   responses:
    204:
     description: Succesfully deleted the salesOrderLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified salesOrderLine
   operationId: patchsalesOrderLinebysequencebydocumentId
   tags: [salesOrderLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesOrderLine'
   responses:
    200:
     description: Succesfully updated the salesOrderLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesOrderLine'
 "/companies({company_id})/retainedEarningsStatement":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of retainedEarningsStatement
   operationId: getretainedEarningsStatement
   tags: [retainedEarningsStatement]
   responses:
    200:
     description: Succesfully returned a list of retainedEarningsStatement
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/retainedEarningsStatement'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'lineNumber', 'display', 'netChange', 'lineType', 'indentation', 'dateFilter']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/retainedEarningsStatement({retainedEarningsStatement_lineNumber})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: retainedEarningsStatement_lineNumber
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'lineNumber', 'display', 'netChange', 'lineType', 'indentation', 'dateFilter']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the retainedEarningsStatement from its unique lineNumber
   operationId: getretainedEarningsStatementbylineNumber
   tags: [retainedEarningsStatement]
   responses:
    200:
     description: Succesfully returned the requested retainedEarningsStatement
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/retainedEarningsStatement'
 "/companies({company_id})/unitsOfMeasure":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of unitsOfMeasure
   operationId: getunitsOfMeasure
   tags: [unitsOfMeasure]
   responses:
    200:
     description: Succesfully returned a list of unitsOfMeasure
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/unitOfMeasure'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'internationalStandardCode', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new unitOfMeasure
   operationId: postunitOfMeasure
   tags: [unitsOfMeasure]
   requestBody:
    $ref: '#/components/requestBodies/unitOfMeasure'
   responses:
    201:
     description: unitOfMeasure succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/unitOfMeasure'
 "/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: unitOfMeasure_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'internationalStandardCode', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the unitOfMeasure from its unique id
   operationId: getunitOfMeasurebyid
   tags: [unitsOfMeasure]
   responses:
    200:
     description: Succesfully returned the requested unitOfMeasure
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/unitOfMeasure'
  delete:
   summary: Allows the user to delete the specified unitOfMeasure
   operationId: deleteunitOfMeasurebyid
   tags: [unitsOfMeasure]
   responses:
    204:
     description: Succesfully deleted the unitOfMeasure with the specified id
  patch:
   summary: Lets the user patch the specified unitOfMeasure
   operationId: patchunitOfMeasurebyid
   tags: [unitsOfMeasure]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/unitOfMeasure'
   responses:
    200:
     description: Succesfully updated the unitOfMeasure with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/unitOfMeasure'
 "/companies({company_id})/agedAccountsReceivable":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of agedAccountsReceivable
   operationId: getagedAccountsReceivable
   tags: [agedAccountsReceivable]
   responses:
    200:
     description: Succesfully returned a list of agedAccountsReceivable
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/agedAccountsReceivable'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'customerId', 'customerNumber', 'name', 'currencyCode', 'balanceDue', 'currentAmount', 'period1Amount', 'period2Amount', 'period3Amount', 'agedAsOfDate', 'periodLengthFilter']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/agedAccountsReceivable({agedAccountsReceivable_customerId})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: agedAccountsReceivable_customerId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'customerId', 'customerNumber', 'name', 'currencyCode', 'balanceDue', 'currentAmount', 'period1Amount', 'period2Amount', 'period3Amount', 'agedAsOfDate', 'periodLengthFilter']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the agedAccountsReceivable from its unique customerId
   operationId: getagedAccountsReceivablebycustomerId
   tags: [agedAccountsReceivable]
   responses:
    200:
     description: Succesfully returned the requested agedAccountsReceivable
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/agedAccountsReceivable'
 "/companies({company_id})/agedAccountsPayable":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of agedAccountsPayable
   operationId: getagedAccountsPayable
   tags: [agedAccountsPayable]
   responses:
    200:
     description: Succesfully returned a list of agedAccountsPayable
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/agedAccountsPayable'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'vendorId', 'vendorNumber', 'name', 'currencyCode', 'balanceDue', 'currentAmount', 'period1Amount', 'period2Amount', 'period3Amount', 'agedAsOfDate', 'periodLengthFilter']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/agedAccountsPayable({agedAccountsPayable_vendorId})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: agedAccountsPayable_vendorId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'vendorId', 'vendorNumber', 'name', 'currencyCode', 'balanceDue', 'currentAmount', 'period1Amount', 'period2Amount', 'period3Amount', 'agedAsOfDate', 'periodLengthFilter']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the agedAccountsPayable from its unique vendorId
   operationId: getagedAccountsPayablebyvendorId
   tags: [agedAccountsPayable]
   responses:
    200:
     description: Succesfully returned the requested agedAccountsPayable
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/agedAccountsPayable'
 "/companies({company_id})/balanceSheet":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of balanceSheet
   operationId: getbalanceSheet
   tags: [balanceSheet]
   responses:
    200:
     description: Succesfully returned a list of balanceSheet
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/balanceSheet'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'lineNumber', 'display', 'balance', 'lineType', 'indentation', 'dateFilter']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/balanceSheet({balanceSheet_lineNumber})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: balanceSheet_lineNumber
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'lineNumber', 'display', 'balance', 'lineType', 'indentation', 'dateFilter']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the balanceSheet from its unique lineNumber
   operationId: getbalanceSheetbylineNumber
   tags: [balanceSheet]
   responses:
    200:
     description: Succesfully returned the requested balanceSheet
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/balanceSheet'
 "/companies({company_id})/trialBalance":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of trialBalance
   operationId: gettrialBalance
   tags: [trialBalance]
   responses:
    200:
     description: Succesfully returned a list of trialBalance
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/trialBalance'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['account']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'number', 'accountId', 'accountType', 'display', 'totalDebit', 'totalCredit', 'balanceAtDateDebit', 'balanceAtDateCredit', 'dateFilter']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/trialBalance({trialBalance_number})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: trialBalance_number
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['account']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'number', 'accountId', 'accountType', 'display', 'totalDebit', 'totalCredit', 'balanceAtDateDebit', 'balanceAtDateCredit', 'dateFilter']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the trialBalance from its unique number
   operationId: gettrialBalancebynumber
   tags: [trialBalance]
   responses:
    200:
     description: Succesfully returned the requested trialBalance
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/trialBalance'
 "/companies({company_id})/incomeStatement":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of incomeStatement
   operationId: getincomeStatement
   tags: [incomeStatement]
   responses:
    200:
     description: Succesfully returned a list of incomeStatement
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/incomeStatement'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'lineNumber', 'display', 'netChange', 'lineType', 'indentation', 'dateFilter']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/incomeStatement({incomeStatement_lineNumber})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: incomeStatement_lineNumber
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'lineNumber', 'display', 'netChange', 'lineType', 'indentation', 'dateFilter']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the incomeStatement from its unique lineNumber
   operationId: getincomeStatementbylineNumber
   tags: [incomeStatement]
   responses:
    200:
     description: Succesfully returned the requested incomeStatement
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/incomeStatement'
 "/companies({company_id})/taxAreas":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of taxAreas
   operationId: gettaxAreas
   tags: [taxAreas]
   responses:
    200:
     description: Succesfully returned a list of taxAreas
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/taxArea'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'taxType', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new taxArea
   operationId: posttaxArea
   tags: [taxAreas]
   requestBody:
    $ref: '#/components/requestBodies/taxArea'
   responses:
    201:
     description: taxArea succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/taxArea'
 "/companies({company_id})/taxAreas({taxArea_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: taxArea_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'code', 'displayName', 'taxType', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the taxArea from its unique id
   operationId: gettaxAreabyid
   tags: [taxAreas]
   responses:
    200:
     description: Succesfully returned the requested taxArea
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/taxArea'
  delete:
   summary: Allows the user to delete the specified taxArea
   operationId: deletetaxAreabyid
   tags: [taxAreas]
   responses:
    204:
     description: Succesfully deleted the taxArea with the specified id
  patch:
   summary: Lets the user patch the specified taxArea
   operationId: patchtaxAreabyid
   tags: [taxAreas]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/taxArea'
   responses:
    200:
     description: Succesfully updated the taxArea with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/taxArea'
 "/companies({company_id})/salesQuotes":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesQuotes
   operationId: getsalesQuotes
   tags: [salesQuotes]
   responses:
    200:
     description: Succesfully returned a list of salesQuotes
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesQuote'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['salesQuoteLines', 'customer', 'currency', 'paymentTerm', 'shipmentMethod']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'externalDocumentNumber', 'documentDate', 'dueDate', 'customerId', 'contactId', 'customerNumber', 'customerName', 'billingPostalAddress', 'currencyId', 'currencyCode', 'paymentTermsId', 'shipmentMethodId', 'salesperson', 'discountAmount', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'status', 'sentDate', 'validUntilDate', 'acceptedDate', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesQuote
   operationId: postsalesQuote
   tags: [salesQuotes]
   requestBody:
    $ref: '#/components/requestBodies/salesQuote'
   responses:
    201:
     description: salesQuote succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesQuote'
 "/companies({company_id})/salesQuotes({salesQuote_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesQuote_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['salesQuoteLines', 'customer', 'currency', 'paymentTerm', 'shipmentMethod']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'externalDocumentNumber', 'documentDate', 'dueDate', 'customerId', 'contactId', 'customerNumber', 'customerName', 'billingPostalAddress', 'currencyId', 'currencyCode', 'paymentTermsId', 'shipmentMethodId', 'salesperson', 'discountAmount', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'status', 'sentDate', 'validUntilDate', 'acceptedDate', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesQuote from its unique id
   operationId: getsalesQuotebyid
   tags: [salesQuotes]
   responses:
    200:
     description: Succesfully returned the requested salesQuote
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesQuote'
  delete:
   summary: Allows the user to delete the specified salesQuote
   operationId: deletesalesQuotebyid
   tags: [salesQuotes]
   responses:
    204:
     description: Succesfully deleted the salesQuote with the specified id
  patch:
   summary: Lets the user patch the specified salesQuote
   operationId: patchsalesQuotebyid
   tags: [salesQuotes]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesQuote'
   responses:
    200:
     description: Succesfully updated the salesQuote with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesQuote'
 "/companies({company_id})/salesQuotes/Microsoft.NAV.makeInvoice":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  post:
   summary: Performs the makeInvoice action for salesQuotes entity
   operationId: makeInvoiceAction_salesQuotes
   tags: [salesQuotes]
   responses:
    204:
     description: Succesfully perfpormed a makeInvoice action on the salesQuotes entity
 "/companies({company_id})/salesQuotes/Microsoft.NAV.send":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  post:
   summary: Performs the send action for salesQuotes entity
   operationId: sendAction_salesQuotes
   tags: [salesQuotes]
   responses:
    204:
     description: Succesfully perfpormed a send action on the salesQuotes entity
 "/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesQuote_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesQuoteLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesQuoteLines
   operationId: getsalesQuoteLinesforsalesQuote
   tags: [salesQuoteLines]
   responses:
    200:
     description: Succesfully returned a list of salesQuoteLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesQuoteLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesQuoteLine
   operationId: postsalesQuoteLineforsalesQuote
   tags: [salesQuoteLines]
   requestBody:
    $ref: '#/components/requestBodies/salesQuoteLine'
   responses:
    201:
     description: salesQuoteLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesQuoteLine'
 "/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines({salesQuoteLine_documentId},{salesQuoteLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesQuote_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesQuoteLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesQuoteLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesQuoteLine from its unique documentId, sequence
   operationId: getsalesQuoteLineforsalesQuotebysequencebydocumentId
   tags: [salesQuoteLines]
   responses:
    200:
     description: Succesfully returned the requested salesQuoteLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesQuoteLine'
  delete:
   summary: Allows the user to delete the specified salesQuoteLine
   operationId: deletesalesQuoteLineforsalesQuotebysequencebydocumentId
   tags: [salesQuoteLines]
   responses:
    204:
     description: Succesfully deleted the salesQuoteLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified salesQuoteLine
   operationId: patchsalesQuoteLineforsalesQuotebysequencebydocumentId
   tags: [salesQuoteLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesQuoteLine'
   responses:
    200:
     description: Succesfully updated the salesQuoteLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesQuoteLine'
 "/companies({company_id})/salesQuoteLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesQuoteLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesQuoteLines
   operationId: getsalesQuoteLines
   tags: [salesQuoteLines]
   responses:
    200:
     description: Succesfully returned a list of salesQuoteLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesQuoteLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesQuoteLine
   operationId: postsalesQuoteLine
   tags: [salesQuoteLines]
   requestBody:
    $ref: '#/components/requestBodies/salesQuoteLine'
   responses:
    201:
     description: salesQuoteLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesQuoteLine'
 "/companies({company_id})/salesQuoteLines({salesQuoteLine_documentId},{salesQuoteLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesQuoteLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesQuoteLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesQuoteLine from its unique documentId, sequence
   operationId: getsalesQuoteLinebysequencebydocumentId
   tags: [salesQuoteLines]
   responses:
    200:
     description: Succesfully returned the requested salesQuoteLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesQuoteLine'
  delete:
   summary: Allows the user to delete the specified salesQuoteLine
   operationId: deletesalesQuoteLinebysequencebydocumentId
   tags: [salesQuoteLines]
   responses:
    204:
     description: Succesfully deleted the salesQuoteLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified salesQuoteLine
   operationId: patchsalesQuoteLinebysequencebydocumentId
   tags: [salesQuoteLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesQuoteLine'
   responses:
    200:
     description: Succesfully updated the salesQuoteLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesQuoteLine'
 "/companies({company_id})/salesCreditMemos":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesCreditMemos
   operationId: getsalesCreditMemos
   tags: [salesCreditMemos]
   responses:
    200:
     description: Succesfully returned a list of salesCreditMemos
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesCreditMemo'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['salesCreditMemoLines', 'customer', 'currency', 'paymentTerm']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'externalDocumentNumber', 'creditMemoDate', 'dueDate', 'customerId', 'contactId', 'customerNumber', 'customerName', 'billingPostalAddress', 'currencyId', 'currencyCode', 'paymentTermsId', 'salesperson', 'pricesIncludeTax', 'discountAmount', 'discountAppliedBeforeTax', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'status', 'lastModifiedDateTime', 'invoiceId', 'invoiceNumber']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesCreditMemo
   operationId: postsalesCreditMemo
   tags: [salesCreditMemos]
   requestBody:
    $ref: '#/components/requestBodies/salesCreditMemo'
   responses:
    201:
     description: salesCreditMemo succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesCreditMemo'
 "/companies({company_id})/salesCreditMemos({salesCreditMemo_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesCreditMemo_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['salesCreditMemoLines', 'customer', 'currency', 'paymentTerm']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'externalDocumentNumber', 'creditMemoDate', 'dueDate', 'customerId', 'contactId', 'customerNumber', 'customerName', 'billingPostalAddress', 'currencyId', 'currencyCode', 'paymentTermsId', 'salesperson', 'pricesIncludeTax', 'discountAmount', 'discountAppliedBeforeTax', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'status', 'lastModifiedDateTime', 'invoiceId', 'invoiceNumber']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesCreditMemo from its unique id
   operationId: getsalesCreditMemobyid
   tags: [salesCreditMemos]
   responses:
    200:
     description: Succesfully returned the requested salesCreditMemo
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesCreditMemo'
  delete:
   summary: Allows the user to delete the specified salesCreditMemo
   operationId: deletesalesCreditMemobyid
   tags: [salesCreditMemos]
   responses:
    204:
     description: Succesfully deleted the salesCreditMemo with the specified id
  patch:
   summary: Lets the user patch the specified salesCreditMemo
   operationId: patchsalesCreditMemobyid
   tags: [salesCreditMemos]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesCreditMemo'
   responses:
    200:
     description: Succesfully updated the salesCreditMemo with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesCreditMemo'
 "/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesCreditMemo_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesCreditMemoLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesCreditMemoLines
   operationId: getsalesCreditMemoLinesforsalesCreditMemo
   tags: [salesCreditMemoLines]
   responses:
    200:
     description: Succesfully returned a list of salesCreditMemoLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesCreditMemoLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesCreditMemoLine
   operationId: postsalesCreditMemoLineforsalesCreditMemo
   tags: [salesCreditMemoLines]
   requestBody:
    $ref: '#/components/requestBodies/salesCreditMemoLine'
   responses:
    201:
     description: salesCreditMemoLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesCreditMemoLine'
 "/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines({salesCreditMemoLine_documentId},{salesCreditMemoLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesCreditMemo_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesCreditMemoLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesCreditMemoLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesCreditMemoLine from its unique documentId, sequence
   operationId: getsalesCreditMemoLineforsalesCreditMemobysequencebydocumentId
   tags: [salesCreditMemoLines]
   responses:
    200:
     description: Succesfully returned the requested salesCreditMemoLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesCreditMemoLine'
  delete:
   summary: Allows the user to delete the specified salesCreditMemoLine
   operationId: deletesalesCreditMemoLineforsalesCreditMemobysequencebydocumentId
   tags: [salesCreditMemoLines]
   responses:
    204:
     description: Succesfully deleted the salesCreditMemoLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified salesCreditMemoLine
   operationId: patchsalesCreditMemoLineforsalesCreditMemobysequencebydocumentId
   tags: [salesCreditMemoLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesCreditMemoLine'
   responses:
    200:
     description: Succesfully updated the salesCreditMemoLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesCreditMemoLine'
 "/companies({company_id})/salesCreditMemoLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesCreditMemoLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of salesCreditMemoLines
   operationId: getsalesCreditMemoLines
   tags: [salesCreditMemoLines]
   responses:
    200:
     description: Succesfully returned a list of salesCreditMemoLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/salesCreditMemoLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new salesCreditMemoLine
   operationId: postsalesCreditMemoLine
   tags: [salesCreditMemoLines]
   requestBody:
    $ref: '#/components/requestBodies/salesCreditMemoLine'
   responses:
    201:
     description: salesCreditMemoLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesCreditMemoLine'
 "/companies({company_id})/salesCreditMemoLines({salesCreditMemoLine_documentId},{salesCreditMemoLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesCreditMemoLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: salesCreditMemoLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasureId', 'unitOfMeasure', 'unitPrice', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'shipmentDate']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the salesCreditMemoLine from its unique documentId, sequence
   operationId: getsalesCreditMemoLinebysequencebydocumentId
   tags: [salesCreditMemoLines]
   responses:
    200:
     description: Succesfully returned the requested salesCreditMemoLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesCreditMemoLine'
  delete:
   summary: Allows the user to delete the specified salesCreditMemoLine
   operationId: deletesalesCreditMemoLinebysequencebydocumentId
   tags: [salesCreditMemoLines]
   responses:
    204:
     description: Succesfully deleted the salesCreditMemoLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified salesCreditMemoLine
   operationId: patchsalesCreditMemoLinebysequencebydocumentId
   tags: [salesCreditMemoLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/salesCreditMemoLine'
   responses:
    200:
     description: Succesfully updated the salesCreditMemoLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/salesCreditMemoLine'
 "/companies({company_id})/purchaseInvoices":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of purchaseInvoices
   operationId: getpurchaseInvoices
   tags: [purchaseInvoices]
   responses:
    200:
     description: Succesfully returned a list of purchaseInvoices
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/purchaseInvoice'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['purchaseInvoiceLines', 'vendor']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'invoiceDate', 'dueDate', 'vendorInvoiceNumber', 'vendorId', 'vendorNumber', 'vendorName', 'buyFromAddress', 'currencyCode', 'pricesIncludeTax', 'discountAmount', 'discountAppliedBeforeTax', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'status', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new purchaseInvoice
   operationId: postpurchaseInvoice
   tags: [purchaseInvoices]
   requestBody:
    $ref: '#/components/requestBodies/purchaseInvoice'
   responses:
    201:
     description: purchaseInvoice succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/purchaseInvoice'
 "/companies({company_id})/purchaseInvoices({purchaseInvoice_id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: purchaseInvoice_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $expand
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['purchaseInvoiceLines', 'vendor']
     style: form
     explode: false
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'id', 'number', 'invoiceDate', 'dueDate', 'vendorInvoiceNumber', 'vendorId', 'vendorNumber', 'vendorName', 'buyFromAddress', 'currencyCode', 'pricesIncludeTax', 'discountAmount', 'discountAppliedBeforeTax', 'totalAmountExcludingTax', 'totalTaxAmount', 'totalAmountIncludingTax', 'status', 'lastModifiedDateTime']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the purchaseInvoice from its unique id
   operationId: getpurchaseInvoicebyid
   tags: [purchaseInvoices]
   responses:
    200:
     description: Succesfully returned the requested purchaseInvoice
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/purchaseInvoice'
  delete:
   summary: Allows the user to delete the specified purchaseInvoice
   operationId: deletepurchaseInvoicebyid
   tags: [purchaseInvoices]
   responses:
    204:
     description: Succesfully deleted the purchaseInvoice with the specified id
  patch:
   summary: Lets the user patch the specified purchaseInvoice
   operationId: patchpurchaseInvoicebyid
   tags: [purchaseInvoices]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/purchaseInvoice'
   responses:
    200:
     description: Succesfully updated the purchaseInvoice with the specified id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/purchaseInvoice'
 "/companies({company_id})/purchaseInvoices/Microsoft.NAV.post":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  post:
   summary: Performs the post action for purchaseInvoices entity
   operationId: postAction_purchaseInvoices
   tags: [purchaseInvoices]
   responses:
    204:
     description: Succesfully perfpormed a post action on the purchaseInvoices entity
 "/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: purchaseInvoice_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: purchaseInvoiceLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of purchaseInvoiceLines
   operationId: getpurchaseInvoiceLinesforpurchaseInvoice
   tags: [purchaseInvoiceLines]
   responses:
    200:
     description: Succesfully returned a list of purchaseInvoiceLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/purchaseInvoiceLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasure', 'unitCost', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'expectedReceiptDate']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new purchaseInvoiceLine
   operationId: postpurchaseInvoiceLineforpurchaseInvoice
   tags: [purchaseInvoiceLines]
   requestBody:
    $ref: '#/components/requestBodies/purchaseInvoiceLine'
   responses:
    201:
     description: purchaseInvoiceLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/purchaseInvoiceLine'
 "/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines({purchaseInvoiceLine_documentId},{purchaseInvoiceLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: purchaseInvoice_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: purchaseInvoiceLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: purchaseInvoiceLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasure', 'unitCost', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'expectedReceiptDate']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the purchaseInvoiceLine from its unique documentId, sequence
   operationId: getpurchaseInvoiceLineforpurchaseInvoicebysequencebydocumentId
   tags: [purchaseInvoiceLines]
   responses:
    200:
     description: Succesfully returned the requested purchaseInvoiceLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/purchaseInvoiceLine'
  delete:
   summary: Allows the user to delete the specified purchaseInvoiceLine
   operationId: deletepurchaseInvoiceLineforpurchaseInvoicebysequencebydocumentId
   tags: [purchaseInvoiceLines]
   responses:
    204:
     description: Succesfully deleted the purchaseInvoiceLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified purchaseInvoiceLine
   operationId: patchpurchaseInvoiceLineforpurchaseInvoicebysequencebydocumentId
   tags: [purchaseInvoiceLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/purchaseInvoiceLine'
   responses:
    200:
     description: Succesfully updated the purchaseInvoiceLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/purchaseInvoiceLine'
 "/companies({company_id})/purchaseInvoiceLines":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: purchaseInvoiceLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of purchaseInvoiceLines
   operationId: getpurchaseInvoiceLines
   tags: [purchaseInvoiceLines]
   responses:
    200:
     description: Succesfully returned a list of purchaseInvoiceLines
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/purchaseInvoiceLine'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasure', 'unitCost', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'expectedReceiptDate']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new purchaseInvoiceLine
   operationId: postpurchaseInvoiceLine
   tags: [purchaseInvoiceLines]
   requestBody:
    $ref: '#/components/requestBodies/purchaseInvoiceLine'
   responses:
    201:
     description: purchaseInvoiceLine succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/purchaseInvoiceLine'
 "/companies({company_id})/purchaseInvoiceLines({purchaseInvoiceLine_documentId},{purchaseInvoiceLine_sequence})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: purchaseInvoiceLine_documentId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: purchaseInvoiceLine_sequence
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'documentId', 'sequence', 'itemId', 'accountId', 'lineType', 'lineDetails', 'description', 'unitOfMeasure', 'unitCost', 'quantity', 'discountAmount', 'discountPercent', 'discountAppliedBeforeTax', 'amountExcludingTax', 'taxCode', 'taxPercent', 'totalTaxAmount', 'amountIncludingTax', 'invoiceDiscountAllocation', 'netAmount', 'netTaxAmount', 'netAmountIncludingTax', 'expectedReceiptDate']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the purchaseInvoiceLine from its unique documentId, sequence
   operationId: getpurchaseInvoiceLinebysequencebydocumentId
   tags: [purchaseInvoiceLines]
   responses:
    200:
     description: Succesfully returned the requested purchaseInvoiceLine
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/purchaseInvoiceLine'
  delete:
   summary: Allows the user to delete the specified purchaseInvoiceLine
   operationId: deletepurchaseInvoiceLinebysequencebydocumentId
   tags: [purchaseInvoiceLines]
   responses:
    204:
     description: Succesfully deleted the purchaseInvoiceLine with the specified documentId, sequence
  patch:
   summary: Lets the user patch the specified purchaseInvoiceLine
   operationId: patchpurchaseInvoiceLinebysequencebydocumentId
   tags: [purchaseInvoiceLines]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/purchaseInvoiceLine'
   responses:
    200:
     description: Succesfully updated the purchaseInvoiceLine with the specified documentId, sequence
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/purchaseInvoiceLine'
 "/companies({company_id})/exchangeContacts":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of exchangeContacts
   operationId: getexchangeContacts
   tags: [exchangeContacts]
   responses:
    200:
     description: Succesfully returned a list of exchangeContacts
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/exchangeContact'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'Id', 'CreatedDateTime', 'LastModifiedDateTime', 'Categories', 'ParentFolderId', 'Birthday', 'FileAs', 'DisplayName', 'GivenName', 'Initials', 'MiddleName', 'NickName', 'Surname', 'Title', 'YomiGivenName', 'YomiSurname', 'YomiCompanyName', 'Generation', 'ImAddresses', 'JobTitle', 'CompanyName', 'Department', 'OfficeLocation', 'Profession', 'AssistantName', 'Manager', 'SpouseName', 'PersonalNotes', 'Children', 'WeddingAnniversary', 'Gender', 'IsFavorite', 'Flag', 'DeltaToken']
       default: '*'
     style: form
     explode: false
  post:
   summary: Lets a user post a new exchangeContact
   operationId: postexchangeContact
   tags: [exchangeContacts]
   requestBody:
    $ref: '#/components/requestBodies/exchangeContact'
   responses:
    201:
     description: exchangeContact succesfully created
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/exchangeContact'
 "/companies({company_id})/exchangeContacts({exchangeContact_Id})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: exchangeContact_Id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'Id', 'CreatedDateTime', 'LastModifiedDateTime', 'Categories', 'ParentFolderId', 'Birthday', 'FileAs', 'DisplayName', 'GivenName', 'Initials', 'MiddleName', 'NickName', 'Surname', 'Title', 'YomiGivenName', 'YomiSurname', 'YomiCompanyName', 'Generation', 'ImAddresses', 'JobTitle', 'CompanyName', 'Department', 'OfficeLocation', 'Profession', 'AssistantName', 'Manager', 'SpouseName', 'PersonalNotes', 'Children', 'WeddingAnniversary', 'Gender', 'IsFavorite', 'Flag', 'DeltaToken']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the exchangeContact from its unique Id
   operationId: getexchangeContactbyId
   tags: [exchangeContacts]
   responses:
    200:
     description: Succesfully returned the requested exchangeContact
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/exchangeContact'
  delete:
   summary: Allows the user to delete the specified exchangeContact
   operationId: deleteexchangeContactbyId
   tags: [exchangeContacts]
   responses:
    204:
     description: Succesfully deleted the exchangeContact with the specified Id
  patch:
   summary: Lets the user patch the specified exchangeContact
   operationId: patchexchangeContactbyId
   tags: [exchangeContacts]
   parameters:
    - $ref: '#/components/parameters/IfMatchParam'
   requestBody:
    $ref: '#/components/requestBodies/exchangeContact'
   responses:
    200:
     description: Succesfully updated the exchangeContact with the specified Id
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/exchangeContact'
 "/companies({company_id})/customerSales":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerSale_customerId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerSale_customerNumber
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of customerSales
   operationId: getcustomerSales
   tags: [customerSales]
   responses:
    200:
     description: Succesfully returned a list of customerSales
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/customerSale'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'customerId', 'customerNumber', 'name', 'totalSalesAmount', 'dateFilter_FilterOnly']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/customerSales({customerSale_customerId},{customerSale_customerNumber},{customerSale_name})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerSale_customerId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerSale_customerNumber
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: customerSale_name
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'customerId', 'customerNumber', 'name', 'totalSalesAmount', 'dateFilter_FilterOnly']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the customerSale from its unique customerId, customerNumber, name
   operationId: getcustomerSalebynamebycustomerNumberbycustomerId
   tags: [customerSales]
   responses:
    200:
     description: Succesfully returned the requested customerSale
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/customerSale'
 "/companies({company_id})/vendorPurchases":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: vendorPurchase_vendorId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: vendorPurchase_vendorNumber
     in: path
     required: true
     schema:
      type: string
      format: uuid
  get:
   summary: Returns a list of vendorPurchases
   operationId: getvendorPurchases
   tags: [vendorPurchases]
   responses:
    200:
     description: Succesfully returned a list of vendorPurchases
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: '#/components/schemas/vendorPurchase'
   parameters: 
   - $ref: '#/components/parameters/topParam'
   - $ref: '#/components/parameters/skipParam'
   - $ref: '#/components/parameters/limitParam'
   - $ref: '#/components/parameters/filterParam'
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'vendorId', 'vendorNumber', 'name', 'totalPurchaseAmount', 'dateFilter_FilterOnly']
       default: '*'
     style: form
     explode: false
 "/companies({company_id})/vendorPurchases({vendorPurchase_vendorId},{vendorPurchase_vendorNumber},{vendorPurchase_name})":
  parameters: 
   - name: company_id
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: vendorPurchase_vendorId
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: vendorPurchase_vendorNumber
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: vendorPurchase_name
     in: path
     required: true
     schema:
      type: string
      format: uuid
   - name: $select
     in: query
     schema:
      type: array
      items:
       type: string
       enum: ['*', 'vendorId', 'vendorNumber', 'name', 'totalPurchaseAmount', 'dateFilter_FilterOnly']
       default: '*'
     style: form
     explode: false
  get:
   summary: Obtain information about the vendorPurchase from its unique vendorId, vendorNumber, name
   operationId: getvendorPurchasebynamebyvendorNumberbyvendorId
   tags: [vendorPurchases]
   responses:
    200:
     description: Succesfully returned the requested vendorPurchase
     content:
      application/json:
       schema:
        $ref: '#/components/schemas/vendorPurchase'
components:
 schemas:
  taxArea:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    taxType:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  paymentMethod:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  salesQuote:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    externalDocumentNumber:
      type: string
    documentDate:
      type: string
      format: date-time
    dueDate:
      type: string
      format: date-time
    customerId:
      type: string
      format: uuid
    contactId:
      type: string
    customerNumber:
      type: string
    customerName:
      type: string
    billingPostalAddress:
      $ref: '#/components/schemas/postaladdresstype'
    currencyId:
      type: string
      format: uuid
    currencyCode:
      type: string
    paymentTermsId:
      type: string
      format: uuid
    shipmentMethodId:
      type: string
      format: uuid
    salesperson:
      type: string
    discountAmount:
      type: number
      format: decimal
    totalAmountExcludingTax:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    totalAmountIncludingTax:
      type: number
      format: decimal
    status:
      type: string
    sentDate:
      type: string
      format: date-time
    validUntilDate:
      type: string
      format: date-time
    acceptedDate:
      type: string
      format: date-time
    lastModifiedDateTime:
      type: string
      format: date-time
  salesQuoteLine:
   type: object
   properties:
    documentId:
      type: string
      format: uuid
    sequence:
      type: integer
      format: int32
    itemId:
      type: string
      format: uuid
    accountId:
      type: string
      format: uuid
    lineType:
      type: string
    lineDetails:
      $ref: '#/components/schemas/documentlineobjectdetailstype'
    description:
      type: string
    unitOfMeasureId:
      type: string
      format: uuid
    unitOfMeasure:
      $ref: '#/components/schemas/unitofmeasuretype'
    unitPrice:
      type: number
      format: decimal
    quantity:
      type: number
      format: decimal
    discountAmount:
      type: number
      format: decimal
    discountPercent:
      type: number
      format: decimal
    discountAppliedBeforeTax:
      type: boolean
    amountExcludingTax:
      type: number
      format: decimal
    taxCode:
      type: string
    taxPercent:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    amountIncludingTax:
      type: number
      format: decimal
    netAmount:
      type: number
      format: decimal
    netTaxAmount:
      type: number
      format: decimal
    netAmountIncludingTax:
      type: number
      format: decimal
  vendorPurchase:
   type: object
   properties:
    vendorId:
      type: string
      format: uuid
    vendorNumber:
      type: string
    name:
      type: string
    totalPurchaseAmount:
      type: number
      format: decimal
    dateFilter_FilterOnly:
      type: string
      format: date-time
  unitofmeasuretype:
   type: object
   properties:
    code:
      type: string
    displayName:
      type: string
    symbol:
      type: string
    unitConversion:
      $ref: '#/components/schemas/itemunitofmeasureconversiontype'
  salesOrder:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    externalDocumentNumber:
      type: string
    orderDate:
      type: string
      format: date-time
    customerId:
      type: string
      format: uuid
    contactId:
      type: string
    customerNumber:
      type: string
    customerName:
      type: string
    billingPostalAddress:
      $ref: '#/components/schemas/postaladdresstype'
    currencyId:
      type: string
      format: uuid
    currencyCode:
      type: string
    pricesIncludeTax:
      type: boolean
    paymentTermsId:
      type: string
      format: uuid
    salesperson:
      type: string
    partialShipping:
      type: boolean
    requestedDeliveryDate:
      type: string
      format: date-time
    discountAmount:
      type: number
      format: decimal
    discountAppliedBeforeTax:
      type: boolean
    totalAmountExcludingTax:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    totalAmountIncludingTax:
      type: number
      format: decimal
    fullyShipped:
      type: boolean
    status:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  shipmentMethod:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  itemCategory:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  dimensionLine:
   type: object
   properties:
    parentId:
      type: string
      format: uuid
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    valueId:
      type: string
      format: uuid
    valueCode:
      type: string
    valueDisplayName:
      type: string
  salesInvoiceLine:
   type: object
   properties:
    documentId:
      type: string
      format: uuid
    sequence:
      type: integer
      format: int32
    itemId:
      type: string
      format: uuid
    accountId:
      type: string
      format: uuid
    lineType:
      type: string
    lineDetails:
      $ref: '#/components/schemas/documentlineobjectdetailstype'
    description:
      type: string
    unitOfMeasureId:
      type: string
      format: uuid
    unitOfMeasure:
      $ref: '#/components/schemas/unitofmeasuretype'
    unitPrice:
      type: number
      format: decimal
    quantity:
      type: number
      format: decimal
    discountAmount:
      type: number
      format: decimal
    discountPercent:
      type: number
      format: decimal
    discountAppliedBeforeTax:
      type: boolean
    amountExcludingTax:
      type: number
      format: decimal
    taxCode:
      type: string
    taxPercent:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    amountIncludingTax:
      type: number
      format: decimal
    invoiceDiscountAllocation:
      type: number
      format: decimal
    netAmount:
      type: number
      format: decimal
    netTaxAmount:
      type: number
      format: decimal
    netAmountIncludingTax:
      type: number
      format: decimal
    shipmentDate:
      type: string
      format: date-time
  salesCreditMemoLine:
   type: object
   properties:
    documentId:
      type: string
      format: uuid
    sequence:
      type: integer
      format: int32
    itemId:
      type: string
      format: uuid
    accountId:
      type: string
      format: uuid
    lineType:
      type: string
    lineDetails:
      $ref: '#/components/schemas/documentlineobjectdetailstype'
    description:
      type: string
    unitOfMeasureId:
      type: string
      format: uuid
    unitOfMeasure:
      $ref: '#/components/schemas/unitofmeasuretype'
    unitPrice:
      type: number
      format: decimal
    quantity:
      type: number
      format: decimal
    discountAmount:
      type: number
      format: decimal
    discountPercent:
      type: number
      format: decimal
    discountAppliedBeforeTax:
      type: boolean
    amountExcludingTax:
      type: number
      format: decimal
    taxCode:
      type: string
    taxPercent:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    amountIncludingTax:
      type: number
      format: decimal
    invoiceDiscountAllocation:
      type: number
      format: decimal
    netAmount:
      type: number
      format: decimal
    netTaxAmount:
      type: number
      format: decimal
    netAmountIncludingTax:
      type: number
      format: decimal
    shipmentDate:
      type: string
      format: date-time
  pdfDocument:
   type: object
   properties:
    id:
      type: string
      format: uuid
    content:
      type: string
      format: binary
  salesCreditMemo:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    externalDocumentNumber:
      type: string
    creditMemoDate:
      type: string
      format: date-time
    dueDate:
      type: string
      format: date-time
    customerId:
      type: string
      format: uuid
    contactId:
      type: string
    customerNumber:
      type: string
    customerName:
      type: string
    billingPostalAddress:
      $ref: '#/components/schemas/postaladdresstype'
    currencyId:
      type: string
      format: uuid
    currencyCode:
      type: string
    paymentTermsId:
      type: string
      format: uuid
    salesperson:
      type: string
    pricesIncludeTax:
      type: boolean
    discountAmount:
      type: number
      format: decimal
    discountAppliedBeforeTax:
      type: boolean
    totalAmountExcludingTax:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    totalAmountIncludingTax:
      type: number
      format: decimal
    status:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
    invoiceId:
      type: string
      format: uuid
    invoiceNumber:
      type: string
  incomeStatement:
   type: object
   properties:
    lineNumber:
      type: integer
      format: int32
    display:
      type: string
    netChange:
      type: number
      format: decimal
    lineType:
      type: string
    indentation:
      type: integer
      format: int32
    dateFilter:
      type: string
      format: date-time
  generalLedgerEntry:
   type: object
   properties:
    id:
      type: integer
      format: int32
    postingDate:
      type: string
      format: date-time
    documentNumber:
      type: string
    documentType:
      type: string
    accountId:
      type: string
      format: uuid
    accountNumber:
      type: string
    description:
      type: string
    debitAmount:
      type: number
      format: decimal
    creditAmount:
      type: number
      format: decimal
    lastModifiedDateTime:
      type: string
      format: date-time
  customerSale:
   type: object
   properties:
    customerId:
      type: string
      format: uuid
    customerNumber:
      type: string
    name:
      type: string
    totalSalesAmount:
      type: number
      format: decimal
    dateFilter_FilterOnly:
      type: string
      format: date-time
  countryRegion:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    addressFormat:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  purchaseInvoiceLine:
   type: object
   properties:
    documentId:
      type: string
      format: uuid
    sequence:
      type: integer
      format: int32
    itemId:
      type: string
      format: uuid
    accountId:
      type: string
      format: uuid
    lineType:
      type: string
    lineDetails:
      $ref: '#/components/schemas/documentlineobjectdetailstype'
    description:
      type: string
    unitOfMeasure:
      $ref: '#/components/schemas/unitofmeasuretype'
    unitCost:
      type: number
      format: decimal
    quantity:
      type: number
      format: decimal
    discountAmount:
      type: number
      format: decimal
    discountPercent:
      type: number
      format: decimal
    discountAppliedBeforeTax:
      type: boolean
    amountExcludingTax:
      type: number
      format: decimal
    taxCode:
      type: string
    taxPercent:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    amountIncludingTax:
      type: number
      format: decimal
    invoiceDiscountAllocation:
      type: number
      format: decimal
    netAmount:
      type: number
      format: decimal
    netTaxAmount:
      type: number
      format: decimal
    netAmountIncludingTax:
      type: number
      format: decimal
    expectedReceiptDate:
      type: string
      format: date-time
  dimensionValue:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  vendor:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    displayName:
      type: string
    address:
      $ref: '#/components/schemas/postaladdresstype'
    phoneNumber:
      type: string
    email:
      type: string
    website:
      type: string
    taxRegistrationNumber:
      type: string
    currencyId:
      type: string
      format: uuid
    currencyCode:
      type: string
    irs1099Code:
      type: string
    paymentTermsId:
      type: string
      format: uuid
    paymentMethodId:
      type: string
      format: uuid
    taxLiable:
      type: boolean
    blocked:
      type: string
    balance:
      type: number
      format: decimal
    lastModifiedDateTime:
      type: string
      format: date-time
  customer:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    displayName:
      type: string
    type:
      type: string
    address:
      $ref: '#/components/schemas/postaladdresstype'
    phoneNumber:
      type: string
    email:
      type: string
    website:
      type: string
    taxLiable:
      type: boolean
    taxAreaId:
      type: string
      format: uuid
    taxAreaDisplayName:
      type: string
    taxRegistrationNumber:
      type: string
    currencyId:
      type: string
      format: uuid
    currencyCode:
      type: string
    paymentTermsId:
      type: string
      format: uuid
    shipmentMethodId:
      type: string
      format: uuid
    paymentMethodId:
      type: string
      format: uuid
    blocked:
      type: string
    balance:
      type: number
      format: decimal
    overdueAmount:
      type: number
      format: decimal
    totalSalesExcludingTax:
      type: number
      format: decimal
    lastModifiedDateTime:
      type: string
      format: date-time
  item:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    displayName:
      type: string
    type:
      type: string
    blocked:
      type: boolean
    baseUnitOfMeasureId:
      type: string
      format: uuid
    baseUnitOfMeasure:
      $ref: '#/components/schemas/unitofmeasuretype'
    gtin:
      type: string
    inventory:
      type: number
      format: decimal
    unitPrice:
      type: number
      format: decimal
    priceIncludesTax:
      type: boolean
    unitCost:
      type: number
      format: decimal
    taxGroupId:
      type: string
      format: uuid
    taxGroupCode:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  employee:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    displayName:
      type: string
    givenName:
      type: string
    middleName:
      type: string
    surname:
      type: string
    jobTitle:
      type: string
    address:
      $ref: '#/components/schemas/postaladdresstype'
    phoneNumber:
      type: string
    mobilePhone:
      type: string
    email:
      type: string
    personalEmail:
      type: string
    employmentDate:
      type: string
      format: date-time
    terminationDate:
      type: string
      format: date-time
    status:
      type: string
    birthDate:
      type: string
      format: date-time
    picture:
      type: string
      format: binary
    lastModifiedDateTime:
      type: string
      format: date-time
  journal:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  account:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    displayName:
      type: string
    category:
      type: string
    subCategory:
      type: string
    blocked:
      type: boolean
    lastModifiedDateTime:
      type: string
      format: date-time
  retainedEarningsStatement:
   type: object
   properties:
    lineNumber:
      type: integer
      format: int32
    display:
      type: string
    netChange:
      type: number
      format: decimal
    lineType:
      type: string
    indentation:
      type: integer
      format: int32
    dateFilter:
      type: string
      format: date-time
  purchaseInvoice:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    invoiceDate:
      type: string
      format: date-time
    dueDate:
      type: string
      format: date-time
    vendorInvoiceNumber:
      type: string
    vendorId:
      type: string
      format: uuid
    vendorNumber:
      type: string
    vendorName:
      type: string
    buyFromAddress:
      $ref: '#/components/schemas/postaladdresstype'
    currencyCode:
      type: string
    pricesIncludeTax:
      type: boolean
    discountAmount:
      type: number
      format: decimal
    discountAppliedBeforeTax:
      type: boolean
    totalAmountExcludingTax:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    totalAmountIncludingTax:
      type: number
      format: decimal
    status:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  dimension:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  salesOrderLine:
   type: object
   properties:
    documentId:
      type: string
      format: uuid
    sequence:
      type: integer
      format: int32
    itemId:
      type: string
      format: uuid
    accountId:
      type: string
      format: uuid
    lineType:
      type: string
    lineDetails:
      $ref: '#/components/schemas/documentlineobjectdetailstype'
    description:
      type: string
    unitOfMeasureId:
      type: string
      format: uuid
    unitOfMeasure:
      $ref: '#/components/schemas/unitofmeasuretype'
    quantity:
      type: number
      format: decimal
    unitPrice:
      type: number
      format: decimal
    discountAmount:
      type: number
      format: decimal
    discountPercent:
      type: number
      format: decimal
    discountAppliedBeforeTax:
      type: boolean
    amountExcludingTax:
      type: number
      format: decimal
    taxCode:
      type: string
    taxPercent:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    amountIncludingTax:
      type: number
      format: decimal
    invoiceDiscountAllocation:
      type: number
      format: decimal
    netAmount:
      type: number
      format: decimal
    netTaxAmount:
      type: number
      format: decimal
    netAmountIncludingTax:
      type: number
      format: decimal
    shipmentDate:
      type: string
      format: date-time
    shippedQuantity:
      type: number
      format: decimal
    invoicedQuantity:
      type: number
      format: decimal
    invoiceQuantity:
      type: number
      format: decimal
    shipQuantity:
      type: number
      format: decimal
  paymentTerm:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    dueDateCalculation:
      type: string
    discountDateCalculation:
      type: string
    discountPercent:
      type: number
      format: decimal
    calculateDiscountOnCreditMemos:
      type: boolean
    lastModifiedDateTime:
      type: string
      format: date-time
  customerPayment:
   type: object
   properties:
    id:
      type: string
      format: uuid
    journalDisplayName:
      type: string
    lineNumber:
      type: integer
      format: int32
    customerId:
      type: string
      format: uuid
    customerNumber:
      type: string
    contactId:
      type: string
    postingDate:
      type: string
      format: date-time
    documentNumber:
      type: string
    externalDocumentNumber:
      type: string
    amount:
      type: number
      format: decimal
    appliesToInvoiceId:
      type: string
      format: uuid
    appliesToInvoiceNumber:
      type: string
    description:
      type: string
    comment:
      type: string
    dimensions:
     type: array
     items:
      $ref: '#/components/schemas/dimensiontype'
    lastModifiedDateTime:
      type: string
      format: date-time
  trialBalance:
   type: object
   properties:
    number:
      type: string
    accountId:
      type: string
      format: uuid
    accountType:
      type: string
    display:
      type: string
    totalDebit:
      type: string
    totalCredit:
      type: string
    balanceAtDateDebit:
      type: string
    balanceAtDateCredit:
      type: string
    dateFilter:
      type: string
      format: date-time
  exchangeContact:
   type: object
   properties:
    Id:
      type: string
    CreatedDateTime:
      type: string
      format: date-time
    LastModifiedDateTime:
      type: string
      format: date-time
    Categories:
     type: array
     items:
      type: string
    ParentFolderId:
      type: string
    Birthday:
      type: string
      format: date-time
    FileAs:
      type: string
    DisplayName:
      type: string
    GivenName:
      type: string
    Initials:
      type: string
    MiddleName:
      type: string
    NickName:
      type: string
    Surname:
      type: string
    Title:
      type: string
    YomiGivenName:
      type: string
    YomiSurname:
      type: string
    YomiCompanyName:
      type: string
    Generation:
      type: string
    ImAddresses:
     type: array
     items:
      type: string
    JobTitle:
      type: string
    CompanyName:
      type: string
    Department:
      type: string
    OfficeLocation:
      type: string
    Profession:
      type: string
    AssistantName:
      type: string
    Manager:
      type: string
    SpouseName:
      type: string
    PersonalNotes:
      type: string
    Children:
     type: array
     items:
      type: string
    WeddingAnniversary:
      type: string
      format: date-time
    Gender:
      type: string
    IsFavorite:
      type: boolean
    Flag:
     type: array
     items:
      type: string
    DeltaToken:
      type: string
  agedAccountsPayable:
   type: object
   properties:
    vendorId:
      type: string
      format: uuid
    vendorNumber:
      type: string
    name:
      type: string
    currencyCode:
      type: string
    balanceDue:
      type: number
      format: decimal
    currentAmount:
      type: number
      format: decimal
    period1Amount:
      type: number
      format: decimal
    period2Amount:
      type: number
      format: decimal
    period3Amount:
      type: number
      format: decimal
    agedAsOfDate:
      type: string
      format: date-time
    periodLengthFilter:
      type: string
  customerPaymentJournal:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  journalLine:
   type: object
   properties:
    id:
      type: string
      format: uuid
    journalDisplayName:
      type: string
    lineNumber:
      type: integer
      format: int32
    accountId:
      type: string
      format: uuid
    accountNumber:
      type: string
    postingDate:
      type: string
      format: date-time
    documentNumber:
      type: string
    externalDocumentNumber:
      type: string
    amount:
      type: number
      format: decimal
    description:
      type: string
    comment:
      type: string
    dimensions:
     type: array
     items:
      $ref: '#/components/schemas/dimensiontype'
    lastModifiedDateTime:
      type: string
      format: date-time
  documentlineobjectdetailstype:
   type: object
   properties:
    number:
      type: string
    displayName:
      type: string
  itemunitofmeasureconversiontype:
   type: object
   properties:
    toUnitOfMeasure:
      type: string
    fromToConversionRate:
      type: number
      format: decimal
  postaladdresstype:
   type: object
   properties:
    street:
      type: string
    city:
      type: string
    state:
      type: string
    countryLetterCode:
      type: string
    postalCode:
      type: string
  salesInvoice:
   type: object
   properties:
    id:
      type: string
      format: uuid
    number:
      type: string
    externalDocumentNumber:
      type: string
    invoiceDate:
      type: string
      format: date-time
    dueDate:
      type: string
      format: date-time
    customerPurchaseOrderReference:
      type: string
    customerId:
      type: string
      format: uuid
    contactId:
      type: string
    customerNumber:
      type: string
    customerName:
      type: string
    billingPostalAddress:
      $ref: '#/components/schemas/postaladdresstype'
    currencyId:
      type: string
      format: uuid
    currencyCode:
      type: string
    orderId:
      type: string
      format: uuid
    orderNumber:
      type: string
    paymentTermsId:
      type: string
      format: uuid
    shipmentMethodId:
      type: string
      format: uuid
    salesperson:
      type: string
    pricesIncludeTax:
      type: boolean
    discountAmount:
      type: number
      format: decimal
    discountAppliedBeforeTax:
      type: boolean
    totalAmountExcludingTax:
      type: number
      format: decimal
    totalTaxAmount:
      type: number
      format: decimal
    totalAmountIncludingTax:
      type: number
      format: decimal
    status:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  unitOfMeasure:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    internationalStandardCode:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  currency:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    symbol:
      type: string
    amountDecimalPlaces:
      type: string
    amountRoundingPrecision:
      type: number
      format: decimal
    lastModifiedDateTime:
      type: string
      format: date-time
  company:
   type: object
   properties:
    id:
      type: string
      format: uuid
    systemVersion:
      type: string
    name:
      type: string
    displayName:
      type: string
    businessProfileId:
      type: string
  cashFlowStatement:
   type: object
   properties:
    lineNumber:
      type: integer
      format: int32
    display:
      type: string
    netChange:
      type: number
      format: decimal
    lineType:
      type: string
    indentation:
      type: integer
      format: int32
    dateFilter:
      type: string
      format: date-time
  balanceSheet:
   type: object
   properties:
    lineNumber:
      type: integer
      format: int32
    display:
      type: string
    balance:
      type: number
      format: decimal
    lineType:
      type: string
    indentation:
      type: integer
      format: int32
    dateFilter:
      type: string
      format: date-time
  taxGroup:
   type: object
   properties:
    id:
      type: string
      format: uuid
    code:
      type: string
    displayName:
      type: string
    taxType:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
  dimensiontype:
   type: object
   properties:
    code:
      type: string
    displayName:
      type: string
    valueCode:
      type: string
    valueDisplayName:
      type: string
  agedAccountsReceivable:
   type: object
   properties:
    customerId:
      type: string
      format: uuid
    customerNumber:
      type: string
    name:
      type: string
    currencyCode:
      type: string
    balanceDue:
      type: number
      format: decimal
    currentAmount:
      type: number
      format: decimal
    period1Amount:
      type: number
      format: decimal
    period2Amount:
      type: number
      format: decimal
    period3Amount:
      type: number
      format: decimal
    agedAsOfDate:
      type: string
      format: date-time
    periodLengthFilter:
      type: string
  companyInformation:
   type: object
   properties:
    id:
      type: string
      format: uuid
    displayName:
      type: string
    address:
      $ref: '#/components/schemas/postaladdresstype'
    phoneNumber:
      type: string
    faxNumber:
      type: string
    email:
      type: string
    website:
      type: string
    taxRegistrationNumber:
      type: string
    currencyCode:
      type: string
    currentFiscalYearStartDate:
      type: string
      format: date-time
    industry:
      type: string
    picture:
      type: string
      format: binary
    businessProfileId:
      type: string
    lastModifiedDateTime:
      type: string
      format: date-time
 requestBodies:
  taxArea:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       taxType:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  paymentMethod:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  salesQuote:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       externalDocumentNumber:
         type: string
       documentDate:
         type: string
         format: date-time
       dueDate:
         type: string
         format: date-time
       customerId:
         type: string
         format: uuid
       contactId:
         type: string
       customerNumber:
         type: string
       customerName:
         type: string
       billingPostalAddress:
         $ref: '#/components/schemas/postaladdresstype'
       currencyId:
         type: string
         format: uuid
       currencyCode:
         type: string
       paymentTermsId:
         type: string
         format: uuid
       shipmentMethodId:
         type: string
         format: uuid
       salesperson:
         type: string
       discountAmount:
         type: number
         format: decimal
       totalAmountExcludingTax:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       totalAmountIncludingTax:
         type: number
         format: decimal
       status:
         type: string
       sentDate:
         type: string
         format: date-time
       validUntilDate:
         type: string
         format: date-time
       acceptedDate:
         type: string
         format: date-time
       lastModifiedDateTime:
         type: string
         format: date-time
  salesQuoteLine:
   required: true
   content:
    application/json:
     schema:
      properties:
       itemId:
         type: string
         format: uuid
       accountId:
         type: string
         format: uuid
       lineType:
         type: string
       lineDetails:
         $ref: '#/components/schemas/documentlineobjectdetailstype'
       description:
         type: string
       unitOfMeasureId:
         type: string
         format: uuid
       unitOfMeasure:
         $ref: '#/components/schemas/unitofmeasuretype'
       unitPrice:
         type: number
         format: decimal
       quantity:
         type: number
         format: decimal
       discountAmount:
         type: number
         format: decimal
       discountPercent:
         type: number
         format: decimal
       discountAppliedBeforeTax:
         type: boolean
       amountExcludingTax:
         type: number
         format: decimal
       taxCode:
         type: string
       taxPercent:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       amountIncludingTax:
         type: number
         format: decimal
       netAmount:
         type: number
         format: decimal
       netTaxAmount:
         type: number
         format: decimal
       netAmountIncludingTax:
         type: number
         format: decimal
  vendorPurchase:
   required: true
   content:
    application/json:
     schema:
      properties:
       totalPurchaseAmount:
         type: number
         format: decimal
       dateFilter_FilterOnly:
         type: string
         format: date-time
  unitofmeasuretype:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       symbol:
         type: string
       unitConversion:
         $ref: '#/components/schemas/itemunitofmeasureconversiontype'
  salesOrder:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       externalDocumentNumber:
         type: string
       orderDate:
         type: string
         format: date-time
       customerId:
         type: string
         format: uuid
       contactId:
         type: string
       customerNumber:
         type: string
       customerName:
         type: string
       billingPostalAddress:
         $ref: '#/components/schemas/postaladdresstype'
       currencyId:
         type: string
         format: uuid
       currencyCode:
         type: string
       pricesIncludeTax:
         type: boolean
       paymentTermsId:
         type: string
         format: uuid
       salesperson:
         type: string
       partialShipping:
         type: boolean
       requestedDeliveryDate:
         type: string
         format: date-time
       discountAmount:
         type: number
         format: decimal
       discountAppliedBeforeTax:
         type: boolean
       totalAmountExcludingTax:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       totalAmountIncludingTax:
         type: number
         format: decimal
       fullyShipped:
         type: boolean
       status:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  shipmentMethod:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  itemCategory:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  dimensionLine:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       valueId:
         type: string
         format: uuid
       valueCode:
         type: string
       valueDisplayName:
         type: string
  salesInvoiceLine:
   required: true
   content:
    application/json:
     schema:
      properties:
       itemId:
         type: string
         format: uuid
       accountId:
         type: string
         format: uuid
       lineType:
         type: string
       lineDetails:
         $ref: '#/components/schemas/documentlineobjectdetailstype'
       description:
         type: string
       unitOfMeasureId:
         type: string
         format: uuid
       unitOfMeasure:
         $ref: '#/components/schemas/unitofmeasuretype'
       unitPrice:
         type: number
         format: decimal
       quantity:
         type: number
         format: decimal
       discountAmount:
         type: number
         format: decimal
       discountPercent:
         type: number
         format: decimal
       discountAppliedBeforeTax:
         type: boolean
       amountExcludingTax:
         type: number
         format: decimal
       taxCode:
         type: string
       taxPercent:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       amountIncludingTax:
         type: number
         format: decimal
       invoiceDiscountAllocation:
         type: number
         format: decimal
       netAmount:
         type: number
         format: decimal
       netTaxAmount:
         type: number
         format: decimal
       netAmountIncludingTax:
         type: number
         format: decimal
       shipmentDate:
         type: string
         format: date-time
  salesCreditMemoLine:
   required: true
   content:
    application/json:
     schema:
      properties:
       itemId:
         type: string
         format: uuid
       accountId:
         type: string
         format: uuid
       lineType:
         type: string
       lineDetails:
         $ref: '#/components/schemas/documentlineobjectdetailstype'
       description:
         type: string
       unitOfMeasureId:
         type: string
         format: uuid
       unitOfMeasure:
         $ref: '#/components/schemas/unitofmeasuretype'
       unitPrice:
         type: number
         format: decimal
       quantity:
         type: number
         format: decimal
       discountAmount:
         type: number
         format: decimal
       discountPercent:
         type: number
         format: decimal
       discountAppliedBeforeTax:
         type: boolean
       amountExcludingTax:
         type: number
         format: decimal
       taxCode:
         type: string
       taxPercent:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       amountIncludingTax:
         type: number
         format: decimal
       invoiceDiscountAllocation:
         type: number
         format: decimal
       netAmount:
         type: number
         format: decimal
       netTaxAmount:
         type: number
         format: decimal
       netAmountIncludingTax:
         type: number
         format: decimal
       shipmentDate:
         type: string
         format: date-time
  pdfDocument:
   required: true
   content:
    application/json:
     schema:
      properties:
       content:
         type: string
         format: binary
  salesCreditMemo:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       externalDocumentNumber:
         type: string
       creditMemoDate:
         type: string
         format: date-time
       dueDate:
         type: string
         format: date-time
       customerId:
         type: string
         format: uuid
       contactId:
         type: string
       customerNumber:
         type: string
       customerName:
         type: string
       billingPostalAddress:
         $ref: '#/components/schemas/postaladdresstype'
       currencyId:
         type: string
         format: uuid
       currencyCode:
         type: string
       paymentTermsId:
         type: string
         format: uuid
       salesperson:
         type: string
       pricesIncludeTax:
         type: boolean
       discountAmount:
         type: number
         format: decimal
       discountAppliedBeforeTax:
         type: boolean
       totalAmountExcludingTax:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       totalAmountIncludingTax:
         type: number
         format: decimal
       status:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
       invoiceId:
         type: string
         format: uuid
       invoiceNumber:
         type: string
  incomeStatement:
   required: true
   content:
    application/json:
     schema:
      properties:
       display:
         type: string
       netChange:
         type: number
         format: decimal
       lineType:
         type: string
       indentation:
         type: integer
         format: int32
       dateFilter:
         type: string
         format: date-time
  generalLedgerEntry:
   required: true
   content:
    application/json:
     schema:
      properties:
       postingDate:
         type: string
         format: date-time
       documentNumber:
         type: string
       documentType:
         type: string
       accountId:
         type: string
         format: uuid
       accountNumber:
         type: string
       description:
         type: string
       debitAmount:
         type: number
         format: decimal
       creditAmount:
         type: number
         format: decimal
       lastModifiedDateTime:
         type: string
         format: date-time
  customerSale:
   required: true
   content:
    application/json:
     schema:
      properties:
       totalSalesAmount:
         type: number
         format: decimal
       dateFilter_FilterOnly:
         type: string
         format: date-time
  countryRegion:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       addressFormat:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  purchaseInvoiceLine:
   required: true
   content:
    application/json:
     schema:
      properties:
       itemId:
         type: string
         format: uuid
       accountId:
         type: string
         format: uuid
       lineType:
         type: string
       lineDetails:
         $ref: '#/components/schemas/documentlineobjectdetailstype'
       description:
         type: string
       unitOfMeasure:
         $ref: '#/components/schemas/unitofmeasuretype'
       unitCost:
         type: number
         format: decimal
       quantity:
         type: number
         format: decimal
       discountAmount:
         type: number
         format: decimal
       discountPercent:
         type: number
         format: decimal
       discountAppliedBeforeTax:
         type: boolean
       amountExcludingTax:
         type: number
         format: decimal
       taxCode:
         type: string
       taxPercent:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       amountIncludingTax:
         type: number
         format: decimal
       invoiceDiscountAllocation:
         type: number
         format: decimal
       netAmount:
         type: number
         format: decimal
       netTaxAmount:
         type: number
         format: decimal
       netAmountIncludingTax:
         type: number
         format: decimal
       expectedReceiptDate:
         type: string
         format: date-time
  dimensionValue:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  vendor:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       displayName:
         type: string
       address:
         $ref: '#/components/schemas/postaladdresstype'
       phoneNumber:
         type: string
       email:
         type: string
       website:
         type: string
       taxRegistrationNumber:
         type: string
       currencyId:
         type: string
         format: uuid
       currencyCode:
         type: string
       irs1099Code:
         type: string
       paymentTermsId:
         type: string
         format: uuid
       paymentMethodId:
         type: string
         format: uuid
       taxLiable:
         type: boolean
       blocked:
         type: string
       balance:
         type: number
         format: decimal
       lastModifiedDateTime:
         type: string
         format: date-time
  customer:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       displayName:
         type: string
       type:
         type: string
       address:
         $ref: '#/components/schemas/postaladdresstype'
       phoneNumber:
         type: string
       email:
         type: string
       website:
         type: string
       taxLiable:
         type: boolean
       taxAreaId:
         type: string
         format: uuid
       taxAreaDisplayName:
         type: string
       taxRegistrationNumber:
         type: string
       currencyId:
         type: string
         format: uuid
       currencyCode:
         type: string
       paymentTermsId:
         type: string
         format: uuid
       shipmentMethodId:
         type: string
         format: uuid
       paymentMethodId:
         type: string
         format: uuid
       blocked:
         type: string
       balance:
         type: number
         format: decimal
       overdueAmount:
         type: number
         format: decimal
       totalSalesExcludingTax:
         type: number
         format: decimal
       lastModifiedDateTime:
         type: string
         format: date-time
  item:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       displayName:
         type: string
       type:
         type: string
       blocked:
         type: boolean
       baseUnitOfMeasureId:
         type: string
         format: uuid
       baseUnitOfMeasure:
         $ref: '#/components/schemas/unitofmeasuretype'
       gtin:
         type: string
       inventory:
         type: number
         format: decimal
       unitPrice:
         type: number
         format: decimal
       priceIncludesTax:
         type: boolean
       unitCost:
         type: number
         format: decimal
       taxGroupId:
         type: string
         format: uuid
       taxGroupCode:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  employee:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       displayName:
         type: string
       givenName:
         type: string
       middleName:
         type: string
       surname:
         type: string
       jobTitle:
         type: string
       address:
         $ref: '#/components/schemas/postaladdresstype'
       phoneNumber:
         type: string
       mobilePhone:
         type: string
       email:
         type: string
       personalEmail:
         type: string
       employmentDate:
         type: string
         format: date-time
       terminationDate:
         type: string
         format: date-time
       status:
         type: string
       birthDate:
         type: string
         format: date-time
       picture:
         type: string
         format: binary
       lastModifiedDateTime:
         type: string
         format: date-time
  journal:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  account:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       displayName:
         type: string
       category:
         type: string
       subCategory:
         type: string
       blocked:
         type: boolean
       lastModifiedDateTime:
         type: string
         format: date-time
  retainedEarningsStatement:
   required: true
   content:
    application/json:
     schema:
      properties:
       display:
         type: string
       netChange:
         type: number
         format: decimal
       lineType:
         type: string
       indentation:
         type: integer
         format: int32
       dateFilter:
         type: string
         format: date-time
  purchaseInvoice:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       invoiceDate:
         type: string
         format: date-time
       dueDate:
         type: string
         format: date-time
       vendorInvoiceNumber:
         type: string
       vendorId:
         type: string
         format: uuid
       vendorNumber:
         type: string
       vendorName:
         type: string
       buyFromAddress:
         $ref: '#/components/schemas/postaladdresstype'
       currencyCode:
         type: string
       pricesIncludeTax:
         type: boolean
       discountAmount:
         type: number
         format: decimal
       discountAppliedBeforeTax:
         type: boolean
       totalAmountExcludingTax:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       totalAmountIncludingTax:
         type: number
         format: decimal
       status:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  dimension:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  salesOrderLine:
   required: true
   content:
    application/json:
     schema:
      properties:
       itemId:
         type: string
         format: uuid
       accountId:
         type: string
         format: uuid
       lineType:
         type: string
       lineDetails:
         $ref: '#/components/schemas/documentlineobjectdetailstype'
       description:
         type: string
       unitOfMeasureId:
         type: string
         format: uuid
       unitOfMeasure:
         $ref: '#/components/schemas/unitofmeasuretype'
       quantity:
         type: number
         format: decimal
       unitPrice:
         type: number
         format: decimal
       discountAmount:
         type: number
         format: decimal
       discountPercent:
         type: number
         format: decimal
       discountAppliedBeforeTax:
         type: boolean
       amountExcludingTax:
         type: number
         format: decimal
       taxCode:
         type: string
       taxPercent:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       amountIncludingTax:
         type: number
         format: decimal
       invoiceDiscountAllocation:
         type: number
         format: decimal
       netAmount:
         type: number
         format: decimal
       netTaxAmount:
         type: number
         format: decimal
       netAmountIncludingTax:
         type: number
         format: decimal
       shipmentDate:
         type: string
         format: date-time
       shippedQuantity:
         type: number
         format: decimal
       invoicedQuantity:
         type: number
         format: decimal
       invoiceQuantity:
         type: number
         format: decimal
       shipQuantity:
         type: number
         format: decimal
  paymentTerm:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       dueDateCalculation:
         type: string
       discountDateCalculation:
         type: string
       discountPercent:
         type: number
         format: decimal
       calculateDiscountOnCreditMemos:
         type: boolean
       lastModifiedDateTime:
         type: string
         format: date-time
  customerPayment:
   required: true
   content:
    application/json:
     schema:
      properties:
       journalDisplayName:
         type: string
       lineNumber:
         type: integer
         format: int32
       customerId:
         type: string
         format: uuid
       customerNumber:
         type: string
       contactId:
         type: string
       postingDate:
         type: string
         format: date-time
       documentNumber:
         type: string
       externalDocumentNumber:
         type: string
       amount:
         type: number
         format: decimal
       appliesToInvoiceId:
         type: string
         format: uuid
       appliesToInvoiceNumber:
         type: string
       description:
         type: string
       comment:
         type: string
       dimensions:
        type: array
        items:
         $ref: '#/components/schemas/dimensiontype'
       lastModifiedDateTime:
         type: string
         format: date-time
  trialBalance:
   required: true
   content:
    application/json:
     schema:
      properties:
       accountId:
         type: string
         format: uuid
       accountType:
         type: string
       display:
         type: string
       totalDebit:
         type: string
       totalCredit:
         type: string
       balanceAtDateDebit:
         type: string
       balanceAtDateCredit:
         type: string
       dateFilter:
         type: string
         format: date-time
  exchangeContact:
   required: true
   content:
    application/json:
     schema:
      properties:
       CreatedDateTime:
         type: string
         format: date-time
       LastModifiedDateTime:
         type: string
         format: date-time
       Categories:
        type: array
        items:
         type: string
       ParentFolderId:
         type: string
       Birthday:
         type: string
         format: date-time
       FileAs:
         type: string
       DisplayName:
         type: string
       GivenName:
         type: string
       Initials:
         type: string
       MiddleName:
         type: string
       NickName:
         type: string
       Surname:
         type: string
       Title:
         type: string
       YomiGivenName:
         type: string
       YomiSurname:
         type: string
       YomiCompanyName:
         type: string
       Generation:
         type: string
       ImAddresses:
        type: array
        items:
         type: string
       JobTitle:
         type: string
       CompanyName:
         type: string
       Department:
         type: string
       OfficeLocation:
         type: string
       Profession:
         type: string
       AssistantName:
         type: string
       Manager:
         type: string
       SpouseName:
         type: string
       PersonalNotes:
         type: string
       Children:
        type: array
        items:
         type: string
       WeddingAnniversary:
         type: string
         format: date-time
       Gender:
         type: string
       IsFavorite:
         type: boolean
       Flag:
        type: array
        items:
         type: string
       DeltaToken:
         type: string
  agedAccountsPayable:
   required: true
   content:
    application/json:
     schema:
      properties:
       vendorNumber:
         type: string
       name:
         type: string
       currencyCode:
         type: string
       balanceDue:
         type: number
         format: decimal
       currentAmount:
         type: number
         format: decimal
       period1Amount:
         type: number
         format: decimal
       period2Amount:
         type: number
         format: decimal
       period3Amount:
         type: number
         format: decimal
       agedAsOfDate:
         type: string
         format: date-time
       periodLengthFilter:
         type: string
  customerPaymentJournal:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  journalLine:
   required: true
   content:
    application/json:
     schema:
      properties:
       journalDisplayName:
         type: string
       lineNumber:
         type: integer
         format: int32
       accountId:
         type: string
         format: uuid
       accountNumber:
         type: string
       postingDate:
         type: string
         format: date-time
       documentNumber:
         type: string
       externalDocumentNumber:
         type: string
       amount:
         type: number
         format: decimal
       description:
         type: string
       comment:
         type: string
       dimensions:
        type: array
        items:
         $ref: '#/components/schemas/dimensiontype'
       lastModifiedDateTime:
         type: string
         format: date-time
  documentlineobjectdetailstype:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       displayName:
         type: string
  itemunitofmeasureconversiontype:
   required: true
   content:
    application/json:
     schema:
      properties:
       toUnitOfMeasure:
         type: string
       fromToConversionRate:
         type: number
         format: decimal
  postaladdresstype:
   required: true
   content:
    application/json:
     schema:
      properties:
       street:
         type: string
       city:
         type: string
       state:
         type: string
       countryLetterCode:
         type: string
       postalCode:
         type: string
  salesInvoice:
   required: true
   content:
    application/json:
     schema:
      properties:
       number:
         type: string
       externalDocumentNumber:
         type: string
       invoiceDate:
         type: string
         format: date-time
       dueDate:
         type: string
         format: date-time
       customerPurchaseOrderReference:
         type: string
       customerId:
         type: string
         format: uuid
       contactId:
         type: string
       customerNumber:
         type: string
       customerName:
         type: string
       billingPostalAddress:
         $ref: '#/components/schemas/postaladdresstype'
       currencyId:
         type: string
         format: uuid
       currencyCode:
         type: string
       orderId:
         type: string
         format: uuid
       orderNumber:
         type: string
       paymentTermsId:
         type: string
         format: uuid
       shipmentMethodId:
         type: string
         format: uuid
       salesperson:
         type: string
       pricesIncludeTax:
         type: boolean
       discountAmount:
         type: number
         format: decimal
       discountAppliedBeforeTax:
         type: boolean
       totalAmountExcludingTax:
         type: number
         format: decimal
       totalTaxAmount:
         type: number
         format: decimal
       totalAmountIncludingTax:
         type: number
         format: decimal
       status:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  unitOfMeasure:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       internationalStandardCode:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  currency:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       symbol:
         type: string
       amountDecimalPlaces:
         type: string
       amountRoundingPrecision:
         type: number
         format: decimal
       lastModifiedDateTime:
         type: string
         format: date-time
  company:
   required: true
   content:
    application/json:
     schema:
      properties:
       systemVersion:
         type: string
       name:
         type: string
       displayName:
         type: string
       businessProfileId:
         type: string
  cashFlowStatement:
   required: true
   content:
    application/json:
     schema:
      properties:
       display:
         type: string
       netChange:
         type: number
         format: decimal
       lineType:
         type: string
       indentation:
         type: integer
         format: int32
       dateFilter:
         type: string
         format: date-time
  balanceSheet:
   required: true
   content:
    application/json:
     schema:
      properties:
       display:
         type: string
       balance:
         type: number
         format: decimal
       lineType:
         type: string
       indentation:
         type: integer
         format: int32
       dateFilter:
         type: string
         format: date-time
  taxGroup:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       taxType:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
  dimensiontype:
   required: true
   content:
    application/json:
     schema:
      properties:
       code:
         type: string
       displayName:
         type: string
       valueCode:
         type: string
       valueDisplayName:
         type: string
  agedAccountsReceivable:
   required: true
   content:
    application/json:
     schema:
      properties:
       customerNumber:
         type: string
       name:
         type: string
       currencyCode:
         type: string
       balanceDue:
         type: number
         format: decimal
       currentAmount:
         type: number
         format: decimal
       period1Amount:
         type: number
         format: decimal
       period2Amount:
         type: number
         format: decimal
       period3Amount:
         type: number
         format: decimal
       agedAsOfDate:
         type: string
         format: date-time
       periodLengthFilter:
         type: string
  companyInformation:
   required: true
   content:
    application/json:
     schema:
      properties:
       displayName:
         type: string
       address:
         $ref: '#/components/schemas/postaladdresstype'
       phoneNumber:
         type: string
       faxNumber:
         type: string
       email:
         type: string
       website:
         type: string
       taxRegistrationNumber:
         type: string
       currencyCode:
         type: string
       currentFiscalYearStartDate:
         type: string
         format: date-time
       industry:
         type: string
       picture:
         type: string
         format: binary
       businessProfileId:
         type: string
       lastModifiedDateTime:
         type: string
         format: date-time
 parameters:
  filterParam:
   name: $filter
   in: query
   schema:
    type: string
   description: Filtering expression
  topParam:
   name: $top
   in: query
   schema:
    type: integer
   description: Number of items to return from the top of the list
  skipParam:
   name: $skip
   in: query
   schema:
    type: integer
   description: Number of items to skip from the list
  limitParam:
   name: $limit
   in: query
   schema:
    type: integer
   description: Number of items to return from the list
  IfMatchParam:
   name: If-Match
   in: header
   schema:
    type: string
   required: true
 securitySchemes:
  basicAuth:
   type: http
   scheme: basic
security:
 - basicAuth: []